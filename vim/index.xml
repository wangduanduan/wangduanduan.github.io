<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>VIM之路 on 洞香春</title>
    <link>https://wdd.js.org/vim/</link>
    <description>Recent content in VIM之路 on 洞香春</description>
    <image>
      <title>洞香春</title>
      <url>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <lastBuildDate>Mon, 10 Jul 2023 12:27:47 +0800</lastBuildDate>
    <atom:link href="https://wdd.js.org/vim/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>困在coc错误弹窗中</title>
      <link>https://wdd.js.org/vim/stuck-in-error-msgfloat-window/</link>
      <pubDate>Mon, 10 Jul 2023 12:27:47 +0800</pubDate>
      <guid>https://wdd.js.org/vim/stuck-in-error-msgfloat-window/</guid>
      <description>&lt;p&gt;请注意，VIM的光标现在位于错误弹窗上了。光标只能左右移动，无法上线移动。 我的光标被困在了错误提示框中。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://wdd.js.org/vim/stuck-in-error-msgfloat-window/atta/2023-07-10-12-30-20.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;因为错误提示只有一行，所以无法上下移动。&lt;/p&gt;
&lt;p&gt;一直以来，我并没有把错误提示框也看成一个窗口，所以我可能多次按了ctrl + w w, 然后光标跳转到了错误提示框上。&lt;/p&gt;
&lt;p&gt;正常的错误提示框，当光标不在关键词上时，错误弹窗会自动关闭的。 但是由于我已经进入了错误弹窗里面。 所以除非按窗口切换的快捷键，我会始终困在这个错误窗口中。&lt;/p&gt;
&lt;p&gt;我觉得，VIM实在是太博大精深了。很多概念性的理解不到位，就会越到很多困难。 这些困难会给人造成极大的挫折感。&lt;/p&gt;
&lt;p&gt;能解决困难，则学到东西。&lt;/p&gt;
&lt;p&gt;否则就只能放弃VIM, 回到VScode的怀抱中。&lt;/p&gt;
&lt;p&gt;但是，我已经习惯了不使用鼠标的快捷编辑方式。&lt;/p&gt;
&lt;p&gt;我只能学会解决并适应VIM， 并且接受VIM的所有挑战。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VIM typescript 跳转到定义</title>
      <link>https://wdd.js.org/vim/typescript-go-to-definition/</link>
      <pubDate>Mon, 10 Jul 2023 09:30:46 +0800</pubDate>
      <guid>https://wdd.js.org/vim/typescript-go-to-definition/</guid>
      <description>&lt;p&gt;在VScode中，可以使用右键来跳转到typescript类型对应的定义，但是用vim的&lt;code&gt;gd&lt;/code&gt;命令却无法正常跳转。&lt;/p&gt;
&lt;p&gt;因为无法正常跳转的这个问题，我差点放弃了vim。&lt;/p&gt;
&lt;p&gt;然而我想别人应该也遇到类似的问题。&lt;/p&gt;
&lt;p&gt;我的neovim本身使用的是coc插件，然后我就再次到看看官方文档，来确定最终有没有解决这个问题的方案。&lt;/p&gt;
&lt;p&gt;功夫不负有心人。&lt;/p&gt;
&lt;p&gt;我发现官方给的例子中，就包括了如何配置跳换的配置。&lt;/p&gt;
&lt;p&gt;首先说明一下，我本身就安装了&lt;code&gt;coc-json coc-tsserver&lt;/code&gt;这两个插件，所以只需要将如下的配置写入init.vim&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34; GoTo code navigation
nmap &amp;lt;silent&amp;gt; gd &amp;lt;Plug&amp;gt;(coc-definition)
nmap &amp;lt;silent&amp;gt; gy &amp;lt;Plug&amp;gt;(coc-type-definition)
nmap &amp;lt;silent&amp;gt; gi &amp;lt;Plug&amp;gt;(coc-implementation)
nmap &amp;lt;silent&amp;gt; gr &amp;lt;Plug&amp;gt;(coc-references)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样的话，在普通模式，按&lt;code&gt;gy&lt;/code&gt;这个快捷键，就能跳转到对应的类型定义，包括某个npm包的里面的类型定义，非常好用。&lt;/p&gt;
&lt;p&gt;亲测有效。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vim 常见问题以及解决方案</title>
      <link>https://wdd.js.org/vim/vim-faq/</link>
      <pubDate>Sat, 28 May 2022 12:21:47 +0800</pubDate>
      <guid>https://wdd.js.org/vim/vim-faq/</guid>
      <description>&lt;h1 id=&#34;修改coc-vim的错误提示&#34;&gt;修改coc-vim的错误提示&lt;/h1&gt;
&lt;p&gt;coc-vim的错误提示窗口背景色是粉红，前景色是深红。这样的掩饰搭配，很难看到具体的文字颜色。&lt;/p&gt;
&lt;p&gt;所以我们需要把前景色改成白色。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:highlight CocErrorFloat ctermfg=White
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参考 &lt;a href=&#34;https://stackoverflow.com/questions/64180454/how-to-change-coc-nvim-floating-window-colors&#34;&gt;https://stackoverflow.com/questions/64180454/how-to-change-coc-nvim-floating-window-colors&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;vim-go一直卡在初始化&#34;&gt;vim go一直卡在初始化&lt;/h1&gt;
&lt;p&gt;有可能没有安装二进制工具&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:GoInstallBinaries
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;neovim-光标变成细线解决方案&#34;&gt;neovim 光标变成细线解决方案&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:set guicursor=
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>vscode vim插件自定义快捷键</title>
      <link>https://wdd.js.org/vim/vscode-vim/</link>
      <pubDate>Sat, 28 May 2022 11:20:30 +0800</pubDate>
      <guid>https://wdd.js.org/vim/vscode-vim/</guid>
      <description>&lt;p&gt;我承认，vscode很香，但是vim的开发方式也让我无法割舍。&lt;/p&gt;
&lt;p&gt;vscode中有个vim插件，基本上可以满足大部分vim的功能。&lt;/p&gt;
&lt;p&gt;这里我定义了我在vim常用的leader快捷键。&lt;/p&gt;
&lt;h1 id=&#34;设置为默认的leader&#34;&gt;设置,为默认的leader&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;vim.leader&amp;#34;: &amp;#34;,&amp;#34;,
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;在normal模式能comandc复制&#34;&gt;在Normal模式能comand+c复制&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    &amp;#34;vim.handleKeys&amp;#34;: {
        &amp;#34;&amp;lt;C-c&amp;gt;&amp;#34;: false,
        &amp;#34;&amp;lt;C-v&amp;gt;&amp;#34;: false
    },
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;leader快捷键&#34;&gt;leader快捷键&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;在插入模式安jj会跳出插入模式&lt;/li&gt;
&lt;li&gt;,a:  跳到行尾部，并进入插入模式&lt;/li&gt;
&lt;li&gt;,c: 关闭当前标签页&lt;/li&gt;
&lt;li&gt;,C: 关闭其他标签页&lt;/li&gt;
&lt;li&gt;,j: 跳转到左边标签页&lt;/li&gt;
&lt;li&gt;,k: 跳转到右边标签页&lt;/li&gt;
&lt;li&gt;,w: 保存文件&lt;/li&gt;
&lt;li&gt;,t: 给出提示框&lt;/li&gt;
&lt;li&gt;,b: 显示或者隐藏文件树窗口&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;完整的配置&#34;&gt;完整的配置&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;    &amp;#34;vim.leader&amp;#34;: &amp;#34;,&amp;#34;,
    &amp;#34;vim.insertModeKeyBindings&amp;#34;: [
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;j&amp;#34;, &amp;#34;j&amp;#34; ],
            &amp;#34;after&amp;#34;: [ &amp;#34;&amp;lt;Esc&amp;gt;&amp;#34; ]
        }
    ],
    &amp;#34;vim.handleKeys&amp;#34;: {
        &amp;#34;&amp;lt;C-c&amp;gt;&amp;#34;: false,
        &amp;#34;&amp;lt;C-v&amp;gt;&amp;#34;: false
    },
    &amp;#34;vim.normalModeKeyBindingsNonRecursive&amp;#34;: [
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;a&amp;#34; ],
            &amp;#34;after&amp;#34;: [ &amp;#34;A&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;c&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;workbench.action.closeActiveEditor&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;C&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;workbench.action.closeOtherEditors&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;j&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;workbench.action.previousEditor&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;k&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;workbench.action.nextEditor&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;w&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;workbench.action.files.save&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;t&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;editor.action.showHover&amp;#34; ]
        },
        {
            &amp;#34;before&amp;#34;: [ &amp;#34;&amp;lt;leader&amp;gt;&amp;#34;, &amp;#34;b&amp;#34; ],
            &amp;#34;commands&amp;#34;: [ &amp;#34;workbench.action.toggleSidebarVisibility&amp;#34; ]
        },
    ]
&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>和系统剪贴板进行交互</title>
      <link>https://wdd.js.org/vim/clipboard/</link>
      <pubDate>Sat, 28 May 2022 10:59:03 +0800</pubDate>
      <guid>https://wdd.js.org/vim/clipboard/</guid>
      <description>&lt;h1 id=&#34;neovim如何与系统剪贴板交互&#34;&gt;neovim如何与系统剪贴板交互？&lt;/h1&gt;
&lt;p&gt;neovim和系统剪贴板的交互方式和vim的机制是不同的，所以不要先入为主的用vim的方式使用neovim。&lt;/p&gt;
&lt;p&gt;neovim需要外部的程序与系统剪贴板进行交互，参考:help clipboard&lt;/p&gt;
&lt;p&gt;neovim按照如下的优先级级方式选择交互程序：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  - |g:clipboard|
  - pbcopy, pbpaste (macOS)
  - wl-copy, wl-paste (if $WAYLAND_DISPLAY is set)
  - xclip (if $DISPLAY is set)
  - xsel (if $DISPLAY is set)
  - lemonade (for SSH) https://github.com/pocke/lemonade
  - doitclient (for SSH) http://www.chiark.greenend.org.uk/~sgtatham/doit/
  - win32yank (Windows)
  - termux (via termux-clipboard-set, termux-clipboard-set)
  - tmux (if $TMUX is set)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;因为我的操作系统是linux, 所以方便的方式是直接安装xclip。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;sudo pacman -Syu xclip
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;两个系统剪贴板有何不同&#34;&gt;两个系统剪贴板有何不同？&lt;/h1&gt;
&lt;p&gt;对于windows和mac来说，只有有一个系统剪贴板，对于linux有两个。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;剪贴板，鼠标选择剪贴板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;剪贴板，选择之后复制剪贴板&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下图，我用鼠标选择了12345, 但是没有按ctrl + c,  这时候你打开nvim， 执行:reg, 可以看到注册器&lt;/p&gt;</description>
    </item>
    <item>
      <title>搜索工作目录下的文件并替换</title>
      <link>https://wdd.js.org/vim/search-dir-replace/</link>
      <pubDate>Sat, 28 May 2022 10:35:58 +0800</pubDate>
      <guid>https://wdd.js.org/vim/search-dir-replace/</guid>
      <description>&lt;p&gt;在vscode中，可以选中一个目录，然后在目录中搜索对应的关键词，再查找到对应文件中，然后做替换。&lt;/p&gt;
&lt;p&gt;在vim也可以这样做。&lt;/p&gt;
&lt;p&gt;但是这件事要分成两步。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;根据关键词，查找文件&lt;/li&gt;
&lt;li&gt;对多个文件进行替换&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;搜索关键词&#34;&gt;搜索关键词&lt;/h1&gt;
&lt;p&gt;搜索关键词可以用grep, 或者vim自带的vimgrep。&lt;/p&gt;
&lt;p&gt;但是我更喜欢用ripgrep，因为速度很快。&lt;/p&gt;
&lt;p&gt;ripgrep也有对应的vim插件 &lt;a href=&#34;https://github.com/jremmen/vim-ripgrep&#34;&gt;https://github.com/jremmen/vim-ripgrep&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;例如要搜索关键词 key1, 那么符合关键词的文件将会被放到quickfix列表中。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:Rg key1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以用 &lt;code&gt;:copen&lt;/code&gt; 来打开quickfix列表。&lt;/p&gt;
&lt;h1 id=&#34;替换-cdo&#34;&gt;替换 cdo&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:cdo %s/key1/key2/gc
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;c表示在替换的时候，需要手工确认每一项。&lt;/p&gt;
&lt;p&gt;在替换的时候，可以输入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;y (yes)执行替换&lt;/li&gt;
&lt;li&gt;n (no)忽略此处替换&lt;/li&gt;
&lt;li&gt;a (all)替换此处和之后的所有项目&lt;/li&gt;
&lt;li&gt;q (quit) 退出替换过程&lt;/li&gt;
&lt;li&gt;l (last) 替换此处后退出&lt;/li&gt;
&lt;li&gt;^E 向上滚动屏幕&lt;/li&gt;
&lt;li&gt;^Y 向下滚动屏幕&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    <item>
      <title>1001个Vim高级技巧 - 0-55</title>
      <link>https://wdd.js.org/vim/vim-tips/</link>
      <pubDate>Fri, 27 May 2022 19:25:48 +0800</pubDate>
      <guid>https://wdd.js.org/vim/vim-tips/</guid>
      <description>&lt;div class=&#34;notice info&#34;&gt;
  &lt;div class=&#34;notice-title&#34;&gt;
    &lt;i class=&#34;fa fa-exclamation-circle&#34; aria-hidden=&#34;true&#34;&gt;&lt;/i&gt;Info
  &lt;/div&gt;
  &lt;div class=&#34;notice-content&#34;&gt;C表示按住Ctrl, C-o表示同时按住Ctrl和o&lt;/div&gt;
&lt;/div&gt;
&lt;h1 id=&#34;1-在tmux中-vim-airline插件颜色显示不正常&#34;&gt;1. 在tmux中 vim-airline插件颜色显示不正常&lt;/h1&gt;
&lt;p&gt;解决方案：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;export TERM&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;screen-256color
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;2-buffer相关操作&#34;&gt;2. buffer相关操作&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:ls # 显示所有打开的buffer
:b {bufferName} #支持tab键自动补全
:bd # 关闭当前buffer
:bn # 切换到下一个buffer
:bp # 切换到上一个buffer
:b# # 切换到上一个访问过的buffer
:b1 # 切换到buffer1
:bm # 切换到最近修改过的buffer
:sb {bufferName} # 上下分屏
:vert sb {bufferName} # 左右分屏
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;3-跳转到对应的符号上&#34;&gt;3. 跳转到对应的符号上&lt;/h1&gt;
&lt;p&gt;下面这种符号，一般都是成双成对的，只要在其中一个上按%, 就会自动跳转到对应的符号&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;() [] {}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;4-关闭netrw的banner&#34;&gt;4. 关闭netrw的banner&lt;/h1&gt;
&lt;p&gt;如果熟练的是用了netrw，就可以把默认开启的banner给关闭掉。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_winsize = 25
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;5-如何同时保存所有发生变化的文件&#34;&gt;5. 如何同时保存所有发生变化的文件？&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;把所有发生变化的文件给保存 &lt;code&gt;:wa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;把所有发生变化的文件都保存，然后退出vim  &lt;code&gt;:xa&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;退出vim, 所有发生变化的文件都不保存，&lt;code&gt;:qa!&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;6-插入当前时间&#34;&gt;6. 插入当前时间&lt;/h1&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;:r!date
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;7-光标下的文件跳转&#34;&gt;7. 光标下的文件跳转&lt;/h1&gt;
&lt;p&gt;按&lt;code&gt;gf&lt;/code&gt;可以跳转光标下的文件&lt;/p&gt;</description>
    </item>
    <item>
      <title>让你放弃VIM的一些原因</title>
      <link>https://wdd.js.org/vim/why-you-leave-vim/</link>
      <pubDate>Tue, 18 May 2021 11:30:22 +0800</pubDate>
      <guid>https://wdd.js.org/vim/why-you-leave-vim/</guid>
      <description>&lt;p&gt;我只使用VIM作为主力开发工具，已经快到200天了。聊聊这其中的一些感受。&lt;/p&gt;
&lt;p&gt;对大部分来说，提到文本编辑器，我们可能会想到word, nodepad++, webstorm, sublime, vscode。&lt;/p&gt;
&lt;p&gt;这些GUI工具在给我们提供便利性的同时，也在逐渐固化我们对于编辑器的认知与思维方式。&lt;/p&gt;
&lt;p&gt;闭上眼睛，提到编辑器，你脑海里想到的界面是什么呢？&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;左边一个文件浏览窗口&lt;/li&gt;
&lt;li&gt;右边一个多标签页的文件编辑窗口&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;陌生感&#34;&gt;陌生感&lt;/h1&gt;
&lt;p&gt;想象一下，我们在使用编辑器的时候，哪些动作做的最多&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;鼠标移动到文件浏览窗口，通过滚轮的滚动，来选择文件，单击之后，打开一个文件。但是在VIM上，完全没有这种操作。&lt;/li&gt;
&lt;li&gt;GUI下可以同时打开多个文件，进行编辑。但是很多人觉得VIM只能打开一个文件，甚至想打开另一个文件的时候，先要退出VIM。即使打开了多个文件，也不知道这些文件要如何切换。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;但是当你刚开始使用VIM的时候，可能并没有安装什么插件，这时候你会有以下的一些困惑&lt;/p&gt;
&lt;p&gt;你用VIM打开一个文件后，怎么再打开一个文件呢？因为默认的VIM是没有文件浏览窗口的。你在GUI模式下养成的经验，在VIM上完全无法使用。你可能甚至不知道要怎么退出VIM。所有的一切都那么陌生。&lt;/p&gt;
&lt;h1 id=&#34;虚无感&#34;&gt;虚无感&lt;/h1&gt;
&lt;p&gt;VIM一般都运行在终端之上，给人感觉云里雾里，虚无缥缈。而编辑器就不同了，你看到的文件夹，打开的文件，对你来说就像是身上穿的衣服，手里搬的砖。终端呢，黑乎乎的，没啥颜色与图标，看起来那么不切实际，仿佛是天边的云彩，千变万化，无法琢磨。&lt;/p&gt;
&lt;h1 id=&#34;恐惧感&#34;&gt;恐惧感&lt;/h1&gt;
&lt;p&gt;很多人可能做过那种梦，就是在梦里感觉自己在自由落体，然后惊醒。在你使用VIM的时候，可能也会有这种感觉。例如，一个文件我写了几百行了，万一ssh远程连接断了，或者说终端崩溃了，我写的文件会不会丢呢？为了安全起见，还是不用VIM吧。&lt;/p&gt;
&lt;h1 id=&#34;挫折感&#34;&gt;挫折感&lt;/h1&gt;
&lt;p&gt;使用VIM的时候，你必然要经历过很多困难，这些困难让你感觉到挫折，失去了继续学习的欲望。内心的另外一个人可能会说，我只想安安静静地做一个写代码的美男子，为什么要折腾这毫无颜值、难用的VIM呢？&lt;/p&gt;</description>
    </item>
    <item>
      <title>从VSCode切换到VIM</title>
      <link>https://wdd.js.org/vim/from-vscode-to-vim/</link>
      <pubDate>Wed, 11 Nov 2020 11:25:58 +0800</pubDate>
      <guid>https://wdd.js.org/vim/from-vscode-to-vim/</guid>
      <description>&lt;p&gt;为了能够在所有环境达到一致且极致的编程体验。我已经准备了好长的时间，从vscode切换到vim上做开发。&lt;/p&gt;
&lt;p&gt;我的切换计划分为多个阶段：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;尝试：使用vim编辑单个文件&lt;/li&gt;
&lt;li&gt;练习：在vscode上安装vim插件，用了一段时间，感觉很别扭。&lt;/li&gt;
&lt;li&gt;徘徊：尝试使用vim作为开发，用了一段时间后，我发现开发速度相比于vim上很慢。特别是多文件编辑，文件创建。没有vscode编辑器的那种文件侧边栏，感觉写代码不太真实，云里雾里的感觉。然后我就又切换到vscode上开发。&lt;/li&gt;
&lt;li&gt;精进：我一直认为我vim已经学的差不多了，但是用vim的时候，总是感觉使不上劲。我觉得我没有系统的学习vim。然后我就去找了vim方面的书籍《vim实用技巧》。这本书我看过第一遍，我觉得自己之前对vim的理解太过肤浅。然后我就找机会从书中学习的技巧练习写代码。这本书我看了不下于三遍，每次看都有收获。每每遇到困惑的地方，我就会随手去查查。然后做总结。&lt;/li&gt;
&lt;li&gt;切换：从今年双十一，我开始使用vim做开发，直到今天，我一直都没有使用vscode, 并且我也把vscode卸载了。我之所以敢于卸载vscode, 是因为我觉得我在vim上开发的效率，已经高于vscode。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;熟练运用vim之后，我发现在vim上切换文件，打开文件还是创建文件，速度非常快，完全不需要鼠标点击。&lt;/p&gt;
&lt;p&gt;除了没有右边的代码预览视图，vim功能都有。而且我越用越觉得vim的netrw插件要比vscode左边栏的文件树窗口好用。&lt;/p&gt;
&lt;p&gt;还有代码搜索，我使用了ack， 用这个命令搜索关键词，简直快的飞起。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

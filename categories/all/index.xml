<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>all on 洞香春</title>
    <link>https://wdd.js.org/categories/all/</link>
    <description>Recent content in all on 洞香春</description>
    <image>
      <title>洞香春</title>
      <url>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 31 Dec 2024 21:06:09 +0800</lastBuildDate><atom:link href="https://wdd.js.org/categories/all/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>2024年的最后三天 - 甲流来袭</title>
      <link>https://wdd.js.org/posts/2024/the-edn-day/</link>
      <pubDate>Tue, 31 Dec 2024 21:06:09 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2024/the-edn-day/</guid>
      <description>28号 - 抗体 28号晚上，我觉得嗓子有点刺痛。因为前两周发过一次烧，我觉得这次嗓子痛应该不会是发烧的前奏了，毕竟身体是有抗体的。
我高估了之前产生的抗体。
29号 - 梦 从29号上午开始，身体就好像在温水煮青蛙，最高到达惊人的峰值40度。
为了控制体温，我先洗个热水澡，吃了布洛芬，躺在床上，拿了一块冰袋，裹在卫生纸里，搁在脑门上。身体挺直，裹着两层厚被。
长夜慢慢，睡睡醒醒。
我梦见自己变成了一棵树，脚上好像长出了根须，缓慢的往地下生长。穿过泥土，与蚯蚓擦肩而过。穿过岩石，被石油染黑。然而到达的却是一块冰山，冰冷坚硬。
手上长出了树干，像天空伸展，摊开自己的枝叶，还没等我享受片刻温暖，太阳仿佛飞速向我飞来，炙热的阳光让我瞬间枯黄，灰飞烟灭。
长夜慢慢，我不敢辗转反侧。我头上还顶着一块冰。
30号 - 发热门诊 终于熬到早上，再测试一遍体温，38度。
算了，还是去医院吧。
穿戴整齐，刚下楼，迎面吹来一阵冷风。我有种无法压抑的，想要咳嗽的冲动，但是我必须忍住，我知道这咳嗽必然“感天动地&amp;quot;。
风继续吹，我忍不住咳了出来，那感觉，仿佛有人伸手把我的气管从我的嘴巴里扯了出来。
到了医院，发热门诊是单独一层的小房子，和气派的十几层的门诊大楼相比，简直像个保安室。
发热门诊虽小，但也五脏俱全。
进门先做鼻拭子，量体温，挂号。 再做血液分析，然后就排队等叫号。医生看了报告，说我是甲流，开了两盒药，一盒抗病毒，一盒用来退烧。
从医院出来，已经中午。我走进医院旁边的永X大王，准备随便吃点。
我挑了一个座位，扫码下单，点了馄炖、蒸蛋、豆浆、银耳莲子羹。
等餐期间， 我发现对面有个中年人大叔，穿这黑色的宽大的羽绒服，胡子拉碴、头发稀少， 他时不时的巡视着其他的人。
没过过久，我等到自己的餐。
馄炖上撒了淡黄的鸡蛋丝和黑色海苔碎，鸡蛋丝吃起来像绳子，海苔碎味同嚼蜡。混度汤非常浑浊，像是用了一天的澡堂池子水。馄炖我就吃了一个，就放弃了。
蒸蛋应该是预制菜，放在黑色塑料小杯中，应该是微波炉加热的。我吃了一口，味道奇怪。
豆浆没什么好说的，毕竟也味道也没有下降空间了。
银耳莲子羹还不错，我都个喝完了。
吃饱喝足，顺便我把医生给我开的药也吃了，我起身离开，刚走到餐桌不到2米， 就瞥见那个大叔匆匆走向我的餐桌。
急诊室 我吃完饭，回到家，每隔一个小时测一次体温，体温很稳定，稳定在38度左右。
一直到晚上，我的体温还是没怎么下降。
老婆给我打电话，说让我赶紧去急诊，去输液，光吃药效果不好，高烧不退会要人命的。 但是我觉得没必要，因为尽然发热门诊的医生都没有让我输液，说明我不需要输液，或者说输液也没有多大作用。
老婆说：&amp;ldquo;你想让我中年丧夫吗？&amp;rdquo;
我无话可说，只能默默穿上衣服，带上口罩，去了早上那家医院的急诊。
晚上9点急诊室人来人往，络绎不绝，仿佛是白天的门诊。 我挂上号，接着又等了将近1个小时，终于等到我了。
给我看病的是位女医生。
”医生，我在你们医院发生门诊早上就看过了，诊断是甲流，药也吃了，到现在还是38度，还是给我输液吧。“，我说
”甲流不是一天两天能好的，至少要发热三天，而且输液效果也不大“，医生说
“那我也烧了两天了，再烧下去人要烧没了。你给我开个输液的吧”
“好的吧，那我就给你开一次输液，你看看效果”
一顿拉扯，我终于能输液了。其实输的也不是什么特殊的东西，就是一带左氧和一袋维C。
输完液，已经晚上11点50，叫了车，回到家里。感觉嘴巴好苦，还好家里有甜的冰糖心苹果。
我啃完第一个苹果，每一口都是苦味。接着我再啃一个苹果，每一口都还是苦味。 如果不是因为发烧，我简直立即想去吃点火锅底料漱漱口。
归梦 睡觉前，我又量了一次体温。体温恢复到37度，看起来正常正常了。
我不知道这是吃药起的效果还是输液的效果。
但是两盒药的价格是270，其中一盒西药50，另一盒重要220。
输液呢，一袋左氧+维C，总共也不过才30。
让我想起了电影《大腕》的名言
31号 这是24年的最后一天，美丽的烟花在天空中绽放璀璨的光芒。
有些人觉得烟花美丽，有些人只觉得吵。</description>
    </item>
    
    <item>
      <title>源码笔记 - 自定义事件路由(中)</title>
      <link>https://wdd.js.org/kamailio/route-list-action/</link>
      <pubDate>Sat, 28 Dec 2024 09:43:00 +0800</pubDate>
      
      <guid>https://wdd.js.org/kamailio/route-list-action/</guid>
      <description>[[TOC]]
route_list route.h定义了几个函数分别用来获取、查找、新增route
// src/core/route.h int route_get(struct route_list *rt, char *name); int route_lookup(struct route_list *rt, char *name); void push(struct action *a, struct action **head); struct route_list { struct action **rlist; int idx;	/* first empty entry */ int entries;	/* total number of entries */ struct str_hash_table names; /* name to route index mappings */ }; rlist 我们对route_list数据模型进行简化:
rlist是一个固定长度的一维数组，通过索引来访问对应的值。如果数组的空间不足，那么就创建一个两倍大的空数据，然后先把原始数据复制过去。这种复制方式保持的原始数据的索引位置。有点像golang的切片扩容机制。
这里最为重要的就是保持数组元素的索引位置在扩容后不变。
static inline int route_new_list(struct route_list *rt) { int ret; struct action **tmp; ret = -1; if(rt-&amp;gt;idx &amp;gt;= rt-&amp;gt;entries) { // 两倍扩容 tmp = pkg_realloc(rt-&amp;gt;rlist, 2 * rt-&amp;gt;entries * sizeof(struct action *)); if(tmp == 0) { LM_CRIT(&amp;#34;out of memory\n&amp;#34;); goto end; } /* init the newly allocated memory chunk */ memset(&amp;amp;tmp[rt-&amp;gt;entries], 0, rt-&amp;gt;entries * sizeof(struct action *)); rt-&amp;gt;rlist = tmp; rt-&amp;gt;entries *= 2; } if(rt-&amp;gt;idx &amp;lt; rt-&amp;gt;entries) { ret = rt-&amp;gt;idx; rt-&amp;gt;idx++; } end: return ret; } str_hash_table 我们对hash_table的数据模型进行简化，它其实就是一hash表，key是路由的名，值是一个正数，正数代表了路由执行单元的索引位置。</description>
    </item>
    
    <item>
      <title>源码笔记 - 自定义事件路由(上)</title>
      <link>https://wdd.js.org/kamailio/customer-event-route/</link>
      <pubDate>Fri, 27 Dec 2024 20:45:03 +0800</pubDate>
      
      <guid>https://wdd.js.org/kamailio/customer-event-route/</guid>
      <description>[[TOC]]
事件路由简介 在某些模块中，我们看到有一些模块自定义的事件路由。
例如dispatcher模块，或者rtpengine模块。
event_route[dispatcher:dst-down] { xlog(&amp;#34;L_ERR&amp;#34;, &amp;#34;Destination down: $rm $ru ($du)\n&amp;#34;); } event_route[rtpengine:dtmf-event] { xlog(&amp;#34;L_INFO&amp;#34;, &amp;#34;callid: $avp(dtmf_event_callid)\n&amp;#34;); xlog(&amp;#34;L_INFO&amp;#34;, &amp;#34;source_tag: $avp(dtmf_event_source_tag)\n&amp;#34;); xlog(&amp;#34;L_INFO&amp;#34;, &amp;#34;timestamp: $avp(dtmf_event_timestamp)\n&amp;#34;); xlog(&amp;#34;L_INFO&amp;#34;, &amp;#34;dtmf: $avp(dtmf_event)\n&amp;#34;); } disapcher模块 在dispatch.c文件中，我们看到如下代码
if(!ds_skip_dst(old_state) &amp;amp;&amp;amp; ds_skip_dst(idx-&amp;gt;dlist[i].flags)) { ds_run_route(msg, address, &amp;#34;dispatcher:dst-down&amp;#34;, rctx); } else { if(ds_skip_dst(old_state) &amp;amp;&amp;amp; !ds_skip_dst(idx-&amp;gt;dlist[i].flags)) ds_run_route(msg, address, &amp;#34;dispatcher:dst-up&amp;#34;, rctx); } ds_run_route还是定义在dispatch.c文件中，
static void ds_run_route(sip_msg_t *msg, str *uri, char *route, ds_rctx_t *rctx) 接着又一个重要调用。 这里似乎在查找路由。
route这个参数其实就是dispatcher:dst-down， 或者 dispatcher:dst-up，
那么event_rt又是什么鬼呢？
rt = route_lookup(&amp;amp;event_rt, route); event_rt是一个route_list的结构体</description>
    </item>
    
    <item>
      <title>DMQ模块源码学习笔记</title>
      <link>https://wdd.js.org/kamailio/dmq-note/</link>
      <pubDate>Sun, 22 Dec 2024 18:07:08 +0800</pubDate>
      
      <guid>https://wdd.js.org/kamailio/dmq-note/</guid>
      <description>背景 多个SIP注册服务器之间，如何同步分机的注册信息呢？
简单的方案就是使用共享数据库的方式同步注册信息，这个方案实现起来简单，但是分机的注册信息本身就是个需要频繁增删改查的，数据库很可能在大量注册分机的压力下，成为性能的瓶颈。
除了数据库之外，OpenSIPS和kamailio分别提供了不同的方案。
OpenSIPS提供的方案是使用cluster模块，cluster模块在多个实例之间同步分机的注册信息，注册信息的格式是OpenSIPS自定义的格式。 Kamailio的方案是DMQ模块， DMQ听起来高大上，放佛是依赖外部的一个服务。 但它其实就是扩展SIP消息，通过SIP消息来广播分机的注册信息。
KDMQ sip:notification_peer@192.168.40.15:5090 SIP/2.0 Via: SIP/2.0/UDP 192.168.40.15;branch=z9hG4bK55e5.423d95110000 To: &amp;lt;sip:notification_peer@192.168.40.15:5090&amp;gt; From: &amp;lt;sip:notification_peer@192.168.40.15:5060&amp;gt;;tag=2cdb7a33a7f21abb98fd3a44968e3ffd-5b01 CSeq: 10 KDMQ Call-ID: 1fe138e07b5d0a7a-50419@192.168.40.15 Content-Length: 116 User-Agent: kamailio (4.3.0 (x86_64/linneaus)) Max-Forwards: 1 Content-Type: text/plain sip:192.168.40.16:5060;status=active sip:192.168.40.15:5060;status=disabled sip:192.168.40.17:5060;status=active 源码分析 该模块一共暴露了8个参数，其中7个参数都是简单类型，INT和STR，就直接取对应变量的地址就可以了。
其中notification_address参数是用来配置集群中其他节点的通信地址的，因为要配置多次，所以需要用一个函数来解析。
// dmq.c static param_export_t params[] = { {&amp;#34;num_workers&amp;#34;, PARAM_INT, &amp;amp;dmq_num_workers}, {&amp;#34;ping_interval&amp;#34;, PARAM_INT, &amp;amp;dmq_ping_interval}, {&amp;#34;server_address&amp;#34;, PARAM_STR, &amp;amp;dmq_server_address}, {&amp;#34;server_socket&amp;#34;, PARAM_STR, &amp;amp;dmq_server_socket}, {&amp;#34;notification_address&amp;#34;, PARAM_STR|PARAM_USE_FUNC, dmq_add_notification_address}, {&amp;#34;notification_channel&amp;#34;, PARAM_STR, &amp;amp;dmq_notification_channel}, {&amp;#34;multi_notify&amp;#34;, PARAM_INT, &amp;amp;dmq_multi_notify}, {&amp;#34;worker_usleep&amp;#34;, PARAM_INT, &amp;amp;dmq_worker_usleep}, {0, 0, 0} }; 这些参数都没有加上static关键词，主要目的为了在dmq模块的其他c文件能使用。</description>
    </item>
    
    <item>
      <title>路由执行的顺序</title>
      <link>https://wdd.js.org/kamailio/msg-flow/</link>
      <pubDate>Sun, 22 Dec 2024 16:20:42 +0800</pubDate>
      
      <guid>https://wdd.js.org/kamailio/msg-flow/</guid>
      <description>1. 请求消息处理过程 请求可以
直接丢弃，不返回任何响应。对于恶意请求，SIP Flood攻击，最好不要返回任何响应。 直接返回状态码，不做转发，例如直接返回301重定向 无状态转发 有状态转发 执行分支路由，分支路由也可以将消息丢弃 无论有无状态，请求发出去前都会执行onsend_route路由，在onsend_route内部，已经不能对SIP消息再做拦截 2. 响应消息处理过程 首先执行reply_route{}, 在这个路由里可以将消息丢弃 然后判断消息是否有状态的 有状态，这执行onreply_route[ID]路由 如果响应是失败的，还可以执行failure_route[ID], 当前前提是在请求路由里是否设置了钩子 在失败路由可以，可以再次设置新的目标地址，进行转发； 设置了新的目标地址后，还可以设置分支路由 Tip 这里要注意的是，响应路由在失败路由之前执行。 3. 重传处理 </description>
    </item>
    
    <item>
      <title>kamailio 启动参数控制</title>
      <link>https://wdd.js.org/kamailio/kamailio-cli-params/</link>
      <pubDate>Sun, 22 Dec 2024 15:46:13 +0800</pubDate>
      
      <guid>https://wdd.js.org/kamailio/kamailio-cli-params/</guid>
      <description>-a mode Auto aliases mode: enable with yes or on, disable with no or off 一般都是关闭 --alias=val Add an alias, the value has to be &amp;#39;[proto:]hostname[:port]&amp;#39; (like for &amp;#39;alias&amp;#39; global parameter) 设置对外别名, 在多个对外别名时，相比于在脚本中写死, 更好的方式 是在启动时传入, alias一般都是服务的对外域名或者IP 如果km有多个对外域名，并且不同的环境都不同，这块配置就合适在脚本里写死 --atexit=val Control atexit callbacks execution from external libraries which may access destroyed shm memory causing crash on shutdown. Can be y[es] or 1 to enable atexit callbacks, n[o] or 0 to disable, default is no.</description>
    </item>
    
    <item>
      <title>DDOS学习笔记</title>
      <link>https://wdd.js.org/posts/2024/ddos/</link>
      <pubDate>Tue, 17 Dec 2024 21:10:40 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2024/ddos/</guid>
      <description>攻击分类 网络层
ICMP Flood攻击: ICMP（Internet Control Message Protocol，因特网控制报文协议）是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。ICMP协议本身特点决定了它非常容易被用于攻击网络上的路由器和主机。当攻击者向目标网络发送大量的ICMP数据包时，目标主机会耗费大量的CPU资源去处理和响应，直至耗尽设备资源，无法为合法用户提供正常服务。 ARP Flood攻击: ARP（Address Resolution Protocol，地址解析协议）是用来将IP地址解析为MAC地址的协议。ARP协议主要以广播的方式发送ARP请求。同网段内的主机都可以收到广播请求，这为攻击者提供了可乘之机。攻击者通过发送大量的ARP请求，使有限的网络资源被无用的广播信息所占用，造成网络拥堵。其次，因为ARP协议没有安全认证机制，所以只要主机接收到ARP应答包，都会缓存在ARP表中，这为ARP欺骗提供了可能。 IP分片攻击: IP协议在传输数据包时，会将数据报文分为若干分片进行传输，并在目标系统中进行重组。IP分片是网络环境中经常发生的事件，但是，如果数据被人为恶意分片就会产生DDoS攻击。攻击者将经过恶意分段的数据包发送至目标网络，导致目标网络耗费大量资源进行重组，直至资源枯竭。 传输层攻击
SYN Flood攻击: SYN Flood是互联网最原始、最经典的DDoS攻击之一，主要利用了TCP协议的三次握手机制。攻击者通常利用工具或控制僵尸主机向服务器发送海量的变源IP地址或变源端口的SYN报文，服务器响应报文后产生大量的半连接，直至系统资源被耗尽，服务器无法提供正常的服务。 ACK Flood攻击: 攻击者通过僵尸网络向目标服务器发送大量的ACK报文，报文带有超大载荷，会引起链路拥塞。或向目标服务器发送极高速率的变源变端口请求，导致转发设备异常，从而引起网络瘫痪。 UDP Flood攻击: UDP Flood攻击常用于大带宽DDoS攻击。攻击者使用包含无状态UDP协议的IP数据包充塞目标主机的端口，受害主机会寻找与UDP数据包相关的应用程序。如果没有找到，就向发送者回发一条“目标不可达”消息。一旦目标主机被攻击流量淹没，系统就会失去响应，从而造成合法用户无法正常访问的现象。 应用层攻击
DNS Flood攻击: 攻击者通过操纵大量傀儡机器，对目标网络发起海量域名查询请求，以中断该域的DNS解析。这种攻击将会破坏网站、API或Web应用程序响应合法流量的能力，让合法用户无法查找到用于调用特定资源的地址，导致业务暂时中断或停止。 HTTP Flood攻击: HTTP GET 攻击：攻击者操控多台设备向目标服务器发送对图像、文件或其他资产请求，当目标服务器被传入请求和响应所淹没时，来自正常流量源的业务请求也将被拒绝。 HTTP POST 攻击：与发送 POST 请求所需的处理能力和带宽相比，处理表单数据和运行必要数据库命令的过程相对密集。这种攻击利用相对资源消耗的差异，直接向目标服务器发送大量POST请求，直至目标服务器容量饱和并拒绝服务为止。 CC攻击: CC攻击常用于攻击提供网页访问服务的服务器。攻击者通过代理服务器向目标服务器发送大量貌似合法的请求，使CPU长时间处于高负荷运行状态，永远都有处理不完的连接。攻击会导致正常访问被中止，最终宕机崩溃。 SIP注册 Flood攻击: 攻击者发送大量的SIP注册请求到SIP服务端，SIP服务器需要查询数据库，拖慢正常的数据库查询，也回占用大量的资源来维护注册的事务。 FAQ 防火墙能否拦截DDOS攻击？ 拦截不了，防火墙就好比饭店的保安，保安再多，但是饭店门口道路交通堵塞了，饭店的营业额下降，再多的保安也无能为力 在遭受DDOS攻击后，用什么手段防御？ 购买硬件设备：除了比较贵之外，对于使用云服务器的服务也无能为力 更换公网IP：对于使用云服务器来说，更换云服务器的公网IP看起来比较简单方便。但是也有麻烦的地方，比如自己的服务可能要涉及到配置改变和服务重启，和自己相关的第三方，也可能要修改IP的访问地址 使用云服务厂商提供的DDOS服务 如何感知到自己的服务正在遭受DDOS攻击？ 异常大的流量波动 正常用户大量离线 参考 https://info.support.huawei.com/info-finder/encyclopedia/zh/DDoS%E6%94%BB%E5%87%BB.html https://www.microsoft.com/zh-cn/security/business/security-101/what-is-a-ddos-attack </description>
    </item>
    
    <item>
      <title>你不怕暴露自己的无知吗？</title>
      <link>https://wdd.js.org/posts/2024/121701/</link>
      <pubDate>Sat, 07 Dec 2024 14:17:28 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2024/121701/</guid>
      <description>公开自己的错误 我在写博客时，有时候脑海里总会蹦出一个小人，面露鄙夷的脸色对我说：你写这么多没啥技术含量的垃圾，公开在网上，难道不怕暴露自己的无知吗？
说实话，我是有这样的担忧。
因为我是有自知之明的，我知道自己估计也是黄老师那种&amp;quot;样样通，样样松&amp;quot;的人。 写的东西也都是一些表面的东西，甚至有错误的可能。这并不是自谦。
我一直无法找到反击脑海里小人的理由。
今天，我在读一本书的时候，学到了一个概念，这个概念叫做坎宁安定律。
在互联网上获得正确答案的最好方法并不是提出问题，而是发布错误的答案
也许我的答案是错误的，但是它并没有被隐藏我脑海的某个角落，二是被公开在了网上。
即使我的小破站再小，必然也会有几个阅读量吧，或许能有读者对错误的答案提出自己的异议。
学习金字塔理论 如果仅仅是通过阅读学习，学习内容的平均存留率只有5%。
如果把学习内容公开，这其中就暗示了你可能需要把自己学到的内容教授给他人这一心理。
那么在记录笔记的时候，就会想办法把问题讲解的让别人更清楚，从而加深了自己的学习知识吸收。
参考 https://baike.baidu.com/item/%E5%AD%A6%E4%B9%A0%E9%87%91%E5%AD%97%E5%A1%94/9515094 </description>
    </item>
    
    <item>
      <title>第一节 如何熟悉Kamailio文档的文档结构</title>
      <link>https://wdd.js.org/kamailio/docs-index/</link>
      <pubDate>Mon, 02 Dec 2024 22:43:24 +0800</pubDate>
      
      <guid>https://wdd.js.org/kamailio/docs-index/</guid>
      <description>我始终认为，快速学习一门知识，最为重要的就是熟悉它的文档结构。
对于熟悉OpenSIPS的文档结构来说的人，看了Kamailio的文档，往往觉得无从下手。
当我们打开Km的官网(kamailio.org)后， 会重定向到https://www.kamailio.org/w/, 在页面的右侧，
接着，我们会导航到 https://www.kamailio.org/w/documentation/
这个页面的结构需要烂熟于心
1. 模块文档 如果你知道km的版本号和对应的模块，可以点击这里进入对应版本，然后再选择对应模块
2. wiki部分 2.1 必学部分 wiki部分主要是一些教程，非常值得看。
其中有三个重点部分
core cookbook： 主要讲解km的脚本的结构、全局参数、模块参数、路由类型、预处理、脚本操作等等，是编写km脚本的必学之处，各种参数都可以看看 Pseudo-Variables CookBook：主要讲解各种伪变量，用来读写SIP消息 Transformations CookBook： 主要讲解各种操作变换，例如把字符串型转为int型数据 全部函数索引 在km的wiki官网，即https://www.kamailio.org/wikidocs/， 其中Alphabetic Indexes就是所有的参数或者函数的索引。
在你学些km的脚本时，有时候想知道某个函数在哪个模块中，就可以用这个全部函数索引中查找。
源码安装 这部分讲解如何通过GIT进行源码安装。
FAQ https://www.kamailio.org/wikidocs/tutorials/faq/main/
外部资源 这里涉及了如何用km和常见的媒体服务器如何集成
其他 官方的Web版本的wiki, 对于刚入门的人来说，还是有点绕的。
另外一个问题就是mkdocs的页面渲染效果的确不太行，目录滚动一点都不灵敏。
如果你想看的不是某个模块的说明文档，我更建议你直接把https://github.com/kamailio/kamailio-wiki 这个git仓库下载到本地查看。
总结 总体来说，km的文档算是非常完整了，但是和OpenSIPS相比，还有待加强。</description>
    </item>
    
    <item>
      <title>TypeSctipt类型实战</title>
      <link>https://wdd.js.org/fe/ts-type-action/</link>
      <pubDate>Fri, 22 Nov 2024 13:04:35 +0800</pubDate>
      
      <guid>https://wdd.js.org/fe/ts-type-action/</guid>
      <description></description>
    </item>
    
    <item>
      <title>AXB的玩法说明</title>
      <link>https://wdd.js.org/opensips/ch2/axb/</link>
      <pubDate>Mon, 18 Nov 2024 19:58:38 +0800</pubDate>
      
      <guid>https://wdd.js.org/opensips/ch2/axb/</guid>
      <description></description>
    </item>
    
    <item>
      <title>#4 糖中毒</title>
      <link>https://wdd.js.org/books/004-%E7%B3%96%E4%B8%AD%E6%AF%92/</link>
      <pubDate>Tue, 12 Nov 2024 14:02:00 +0800</pubDate>
      
      <guid>https://wdd.js.org/books/004-%E7%B3%96%E4%B8%AD%E6%AF%92/</guid>
      <description>人类诞生在200万年前，工业革命诞生到现在不到200年。
200相比于200万，几乎可以忽略不计。
我们的身体，细胞，是两百万年的经历累积的结晶。在200万年的时间，我们从采集、狩猎获取食物，大部分时间处于饥饿状态，改变为从超市、菜市场、美食广场、在线商城中选购。
就好像早上刚出生小牛，中午就开始吃红酒配法式鹅肝。
身体变化不大，我们的饮食结构可以说在极短的时间发生了翻天覆地的变化。
因此，也难怪三高、各种慢性病，全世界遍地开花、星火燎原。
《糖中毒》 牧田善二
13个笔记
了解糖分是什么，就能轻松减肥 大脑处于不由自主地想摄入米饭和面类食物等碳水化合物、无醇饮料￼、零食 在现代社会，不上瘾是很难的 两者的根源都是“大脑无法忘记快感”。 “为了大脑运转而摄取糖分”是恶魔的谎言 大脑的能量来源通常是葡萄糖。如果葡萄糖不足，则通过蛋白质和脂肪分解出来的氨基酸和甘油三酯来维持血糖值。但是如果继续禁食，血液中的酮体就会上升，大脑就会用酮体代替葡萄糖作为能量源 第一章回顾 ◎须知肥胖和糖中毒都是慢性病。 ◎让我们发胖的不是热量而是糖分。 ◎肥胖的原因是糖中毒，与意志和体质无关。 ◎了解糖分是什么并适当摄取，就能轻松减肥。 ◎蔬菜汁和果汁对身体有害。 ◎碳水化合物才是引起糖中毒的主要原因。 ◎记住了至福点的大脑，就像被糖控制了一样。 ◎如果没有意识到这一点，大多数人都会陷入糖中毒。 ◎即使葡萄糖不足，大脑也不会停止运转 “奖励系统”——引起糖中毒的机制 所谓的糖中毒，就是由于大脑对糖分的反应机制，人们无法从这种循环中摆脱出来的一种状态。 液态糖是一种魔鬼食品 血糖值一旦跌破70 mg/dL，就会出现不适症状，就会被迫按照大脑的指令摄取糖分 糖分使你发胖——肥胖的机制 胰岛素先将血液中溢出的葡萄糖转化为糖原，储存在肝脏和肌肉中 第二章回顾 糖分摄入的越多，大脑就越容易上瘾。 ◎烦躁易怒也可能是因为糖中毒。 ◎含有大量糖分的碳酸饮料和果汁简直就是魔鬼食品。 ◎糖中毒会加速衰老。 ◎糖中毒会导致糖尿病、高血压、癌症、心肌梗死、脑卒中、慢性肾病和阿尔茨海默病。 ◎糖分几乎百分之百会转化为葡萄糖，被人体全部吸收。 ◎吃脂质并不会变胖。 ◎减少脂质摄入量不能减肥，反而会危害健康。 ◎只要不停地吃碳水化合物，就永远也瘦不下来。 ◎男性肥胖特别危险，女性太瘦也不好。 哪些食物不会导致血糖值升高 蔬菜（不包括根茎类蔬菜）、蘑菇、海藻、豆类、肉类、鱼类、豆腐基本上不会导致血糖值升高 米饭、面包等碳水化合物，薯类等含糖量高的根茎类蔬菜，南瓜等含糖量高的蔬菜，含糖量高的无醇饮料等，会导致血糖值大幅升高 最后再吃碳水化合物 只要好好咀嚼，就能向大脑的饱腹中枢发出“吃了很多”的信号，最终就能减少碳水化合物的摄入量。 “吃完后马上运动”——抵消刚刚吃进去的碳水化合物 12秒深蹲”，特别适合那些没有时间运动的人。顾名思义，每次深蹲只需12秒。慢慢蹲下来，慢慢站起来，这个动作对大腿的负荷很大，效果很好。 这样做10次，就能抵消刚刚吃进去的碳水化合物。 第三章回顾 一辈子都不喝含糖的碳酸饮料、含糖的罐装咖啡等饮料 来自微信读书</description>
    </item>
    
    <item>
      <title>#3 戒糖 改变一生的科学饮食法</title>
      <link>https://wdd.js.org/books/003-%E6%88%92%E7%B3%96-%E6%94%B9%E5%8F%98%E4%B8%80%E7%94%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E9%A5%AE%E9%A3%9F%E6%B3%95/</link>
      <pubDate>Tue, 12 Nov 2024 10:55:06 +0800</pubDate>
      
      <guid>https://wdd.js.org/books/003-%E6%88%92%E7%B3%96-%E6%94%B9%E5%8F%98%E4%B8%80%E7%94%9F%E7%9A%84%E7%A7%91%E5%AD%A6%E9%A5%AE%E9%A3%9F%E6%B3%95/</guid>
      <description>戒糖，关键是理解两个字
戒：应当理解为警戒，而不是戒除。完全戒除是不可能的 糖：不能单纯的只理解为甜食、白砂糖之类的具有甜味的视频。具有甜味只是冰山一角的特征，更大的特征是碳水画合物。嘴巴舌头喜欢的东西，胃、小肠、小肠并不一定喜欢。就拿舌头喜欢的“甜、香、软、糯、鲜”来说，这部分都可以算作糖类。 《戒糖：改变一生的科学饮食法》 初夏之菡
20个笔记
戒糖戒掉的是什么？ “空热量”食物的概念很好理解，指除了能够给我们热量之外，没有其他已知的营养益处的食物，而游离糖正符合这一概念。 高糖饮食：对一生有害的习惯 戒糖是在备孕期间就应该着手养成的良好营养习惯之一。真正让孩子赢在起跑线上的，往往是妈妈的饮食和身体素质。 “生酮饮食”真的健康吗？ 我们的身体是不需要游离糖的。但是我们的心需要它，而且这种对甜的渴望并不是一种错 食品配料表、营养成分表怎么读？ ，即每天需求2000千卡热量，蛋白质60克，脂肪60克，碳水化合物300克，钠2000毫克，然后按这几个数值的百分比来显示。 每100克大米饭约含有26克碳水化合物 如何综合判断食品中的碳水化合物含量高低？ 碳水化合物在食物中主要有三种形态：膳食纤维、淀粉以及游离 所以膳食纤维是有能量效应的，它在营养学中统一的折算能量是每克2千卡，是可消化碳水化合物的50%。 在热且湿润的食物中，淀粉的口感非常明显，就是“软乎”和“糯” 蛋白质和淀粉的混合会让食物的口感更加绵软湿润，比如奶酪蛋糕 我国国家标准规定“纯牛奶”只能含有新鲜牛乳，所以可以认为任何加了糖的乳制品都属于“调味乳 葡萄糖是膳食纤维的一种） 进一步减少血糖波动：吃的顺序很重要 2024/11/05 发表想法
先吃蔬菜，接着肉、蛋白、最后米饭
原文：最后吃碳水化合物丰富的食物
最后吃碳水化合物丰富的食物
抗糖办法之运动与思考 2024/11/05 发表想法
无论如何运动，都无法弥补过度进食造成的伤害。
原文：过度进食造成的能量负载过度对我们百害而无一利。这一点从微观的能量代谢上来说就更加说得通了
过度进食造成的能量负载过度对我们百害而无一利。这一点从微观的能量代谢上来说就更加说得通了
所以只有适量地吃、适当地动才是平衡的养生之道。而适量的确是个很难把握的度，但是只要听从你的身体和内心，
第10章 戒糖的另一种方式：轻断食 [插图] • “5+2”模式：这个也是麦克尔·莫斯利博士提出的一个改良方法，即以周为单位，选择任意2天（可以不连续）进行热量限制饮食——只吃平时热量的1/4，其他5天正常进食。 • 禁止加餐模式： 戒糖的终极动力来源 那些充满游离糖和快消化碳水化合物的食物，一般是“甜、香、软、糯”必占其一的食物， 来自微信读书</description>
    </item>
    
    <item>
      <title>第二份工作的辞职总结</title>
      <link>https://wdd.js.org/posts/2024/leave-the-second-job/</link>
      <pubDate>Tue, 10 Sep 2024 21:08:51 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2024/leave-the-second-job/</guid>
      <description>总结 第二份工作快到一年了，我最近申请离职了。
同事问我离职原因，我说被领导骂了，感觉自尊受辱，索性不干了。
实际上被领导骂只是压死骆驼的最后一根稻草，我也不是那种会心血来潮说干就不干的。
这份工作，我做了不到一年，大部分的时间我是做的不开心的。
所以离职是一直在心里酝酿。
为什么会工作不开心？
主要原因有以下四点：
行业前景暗淡：S公司处在行业的中游，上游受到运营商管控，下游在客户层面话语权也不大。这是一个资源限制型的行业，行业的命脉就在运营商，可能运营商有个风吹草动，整个行业就要翻江倒海。 自研能力薄弱：S公司大部分业务都是购买的第三方的软件，各种变更都受到制约，添加一个小功能都要付费升级。自研能力弱的一个原因可能就是前些年赚钱太容易了，投资研发哪有赚快钱来的舒服呢。同时也是这个原因，多个第三方软件之间也造成了数据割裂，运行维护困难。 家族企业制约：S公司大部分人员都是老板的亲朋好友，家族式企业的优点是内聚力强，但是包容性弱。之前也有一些大厂进来的员工，没多久就辞职了。 我曾经也跟老板沟通过，似乎老板也有心做些变革。但是变革哪有那么容易，要变革不早都变了，还要等到现在？ 短期主义：似乎S公司没有什么具体的愿景，唯一感觉到的愿景就是赚快钱。一旦发现投入的回报太少，就立即切换目标。 企业关怀差：说实在，我没有感觉到多少员工关怀。在S公司的工作和在地主家做短工也没啥区别，老板想什么都要管，但是即管不了那么多，又管的不好。所以给人的感觉就是东一棒槌，西一榔头，看起来很卖力，实际上并没有什么产出。几乎每个月都有人离职，对员工都吝啬，不考虑员工的自尊，员工怎么可能对公司有归属感。 工作压力大：受限于资源收紧、产品优势小，老板想提高营业额的方法是提高员工的服务水平。说实在，这真是杯水车薪。不想着从底层系统的解决问题，只想着通过给员工压力、通过加班来解决问题，只会造成工作压力大、人员流失大。 所以，我的离职，实际上也是考虑再三的一个选择。
当然，我在S公司也不是什么收获都没有。
收获总结 深入了解了行业的运行原理、客户、资源、政策等信息 对于数据分析方面有了较大的进步，毕竟我做了40+个数据报表来分析运行数据 深入学习了python, 主要用来做数据分析。数据分析方面的协议栈主要有pandas、duckdb、doris(MySQL)、grafana来组成 深入学习了python的GUI开发，主要用到的框架是wxPython，开发的两个工具分别给到运维人员和客服去使用，来提高运行效率 </description>
    </item>
    
    <item>
      <title>Windows安装Tesserocr</title>
      <link>https://wdd.js.org/posts/2024/windows-install-tesserocr/</link>
      <pubDate>Wed, 24 Apr 2024 08:34:07 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2024/windows-install-tesserocr/</guid>
      <description>安装tesserocr-windows_build 到tesserocr-windows_build release页面下载对应的whl文件
如下载 tesserocr-2.6.2-cp312-cp312-win_amd64.whl， 下载之后用pip安装
pip install tesserocr-2.6.2-cp312-cp312-win_amd64.whl 安装ocr windows exe程序 在这个页面，有对应的exe程序，https://digi.bib.uni-mannheim.de/tesseract/
例如下载这个exe文件 https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-v5.3.0.20221214.exe
下载完成之后点击安装，一般我们不需要修改他的安装位置，默认的安装位置是C:\Program Files\Tesseract-OCR
我们将C:\Program Files\Tesseract-OCR\tessdata下的所有文件，复制到C:\Program Files\Tesseract-OCR\目录下
参考 https://github.com/simonflueckiger/tesserocr-windows_build/releases https://digi.bib.uni-mannheim.de/tesseract/ https://tesseract-ocr.github.io/tessdoc/Downloads.html https://blog.csdn.net/Yuyh131/article/details/103880585 </description>
    </item>
    
    <item>
      <title>使用Excel理解prometheus的变化率相关函数</title>
      <link>https://wdd.js.org/posts/2024/learn-prom-with-excel/</link>
      <pubDate>Sat, 16 Mar 2024 08:38:46 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2024/learn-prom-with-excel/</guid>
      <description>counter类型的变化率 rate, irate, increase counter类型一般是只增不减的累积值，例如系统累计的http请求数量, 累计的话单数量。
counter类型的指标变化率一般使用三个函数来计算，rate, irate, increase
指标每隔15s采样一次数据, A列是采集的指标值，B列是对应的采集时间。
demo_api_request_duration_seconds_count{instance=&amp;#34;demo-service-0:10000&amp;#34;,path=&amp;#34;/api/bar&amp;#34;,status=&amp;#34;200&amp;#34;,method=&amp;#34;GET&amp;#34;}[1m] 序号 A B 1 294401976 1710549816.105 2 294402185 1710549831.105 3 294402393 1710549846.105 4 294402599 1710549861.105 rate是计算每秒的变化率,
rate 计算方案 (A4-A1) / (B4-B1)， 这里选择了首尾两个值的差值，除以时长秒 irate 计算方案 (A4-A3) / (B4-B3) , 这里只选择里最后两个点的差值，除以时长秒 increase 计算方式 (A4-A1) / (B4-B1) * 60, 这里的60是1m, 其实increase就是rate() * windows_seconds的语法糖 guage 296164749 @1710648381.105 296165055 @1710648396.105 296165364 @1710648411.105 296165668 @1710648426.105 296165978 @1710648441.105 296166186 @1710648456.105 296166505 @1710648471.105 296166826 @1710648486.105 296167151 @1710648501.</description>
    </item>
    
    <item>
      <title>什么时候应该使用ts范型?</title>
      <link>https://wdd.js.org/posts/2023/when-to-use-ts-generics/</link>
      <pubDate>Thu, 28 Dec 2023 20:21:11 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/when-to-use-ts-generics/</guid>
      <description>我知道ts支持范型，但是因为几乎用不到，所以对于范型对我来说往往蒙上一层神秘色彩。
最近我才真正的体会到范型的真正威力。
下面就介绍我的使用场景。
在和后端接口交互的时候， 后端接口返回的数据都是如下的类型。
interface XData { success: boolean total: number result: any[] } 这里我把result定义为any类型，因为它的具体类型是由接口确定的。 比如查话单的接口是话单的结构类型，查订单的接口返回的是订单的类型。
interface CDR { id: number creatAt: string } interface Order { id: number } 在不用范型的时候，我们要么定义如下两个interface
interface XDataCDR { success: boolean total: number result: CDR[] } interface XDataOrder { success: boolean total: number result: Order[] } 在使用axios的时候，对于响应体的data, 可以使用如下的方式声明data
function getCDR (id) { return axios.get&amp;lt;XDataCDR&amp;gt;(&amp;#39;/api/xxx&amp;#39; + id) } 但是，如果我们稍微修改一下XData的类型声明，加上范型。 就不需要用到XDataCDR和XDataOrder两个接口。
interface XData&amp;lt;T&amp;gt; { success: boolean total: number result: T[] } function getCDR (id) { return axios.</description>
    </item>
    
    <item>
      <title>使用bun加速开发环境的ts编写</title>
      <link>https://wdd.js.org/posts/2023/typescript-with-bun/</link>
      <pubDate>Sat, 23 Dec 2023 15:04:44 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/typescript-with-bun/</guid>
      <description>前言 最近我在开发一个demo程序，为了加速开发，我觉得直接用js要比用typescript更快，而且这只是一个demo程序，杀鸡焉用牛刀。
而且一旦我要用typescript开发，避免不了要各种配置，例如typescript, ts-node, nodemon之类的，很是繁琐。而且ts也必须要经过编译后才能运行。
然而，直到遇到一个bug, 我排查了半天，才发现是一个对象的属性写错了。本身这个对象是没有这个属性的，js没有任何错误提示。我只能一步一步缩小代码的范围，最终才定位到是属性拼写的错误。
这个拼写的错误，应该是vscode的智能补全，给出的提示词，我直接回车确认了。
这件事给我一个教训：以后所有代码都要用ts去编写。
直接用js去编写虽然看起来写的快，但是代码调试太痛苦了。 这种拼写错误，ts的智能提示会直接告诉你错误的地方，但是如果去排查js文件，花费的时间是无法估量的。
但是我又不太想去配置各种ts的执行环境，就想起来之前曾经用的bun这个ts执行工具。
虽然bun这个工具才刚刚发布1.0版本，但是在开发环境使用也是足够了。
我的设想是在开发环境用bun, 在生产环境用nodejs执行bun编译后的js代码。
这个demo程序用bun去运行的时候，没发现任何兼容问题。 这也让我有了继续研究下去的信心。
bun的开发环境 我之前看过deno, 但是看多deno的官方文档后，发现并不符合我的胃口。 但是bun的文档写的很好。
任何工具的第一步都是安装，但是bun似乎在windows上执行并不太好，所以我是用windows的linux子系统，或者在mac上安装的bun。
具体的安装步骤可以参考，https://bun.sh/docs/installation
项目初始化 bun init bun init helps you get started with a minimal project and tries to guess sensible defaults. Press ^C anytime to quit. package name (quickstart): entry point (index.ts): Done! A package.json file was saved in the current directory. + index.ts + .gitignore + tsconfig.json (for editor auto-complete) + README.</description>
    </item>
    
    <item>
      <title>算法 - 入侵脑细胞</title>
      <link>https://wdd.js.org/posts/2023/the-cell/</link>
      <pubDate>Tue, 21 Nov 2023 20:35:02 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/the-cell/</guid>
      <description>我以前看过一部电影，叫做《入侵脑细胞》，这部电影提供一种可能性。类似的电影还有《盗梦空间》，都是将一种思想植入别人的思想中。
这两部电影虽然提供了可能性，但是却无法提供实际可操作的方案。
最近在阅读的一本书也于此有关，叫做《对不起，我操控了你的大脑》，是一个叫做剑桥分析、曾轰动世界的公司，利用基于大数据、算法、人工智能、心理学来做思想植入的。常见的领域如操纵大选，并且提供成功的案例。
但是作为普通人，大规模的思想植入似乎里我们还是比较遥远。
但是真的那么遥远吗？
昨天我爸来看我，之前他总是抱怨手机流量不够用。我给他换了每个月180G的流量卡，才过没两三天，他说已经用了20多G了。按照这个速度，180G的流量也不够用一个月。
我问：“你怎么会用那么多流量！，你用手机看视频的吗？”
爸说：“我经常刷抖音，刷好久，刷的眼疼”
我说：“你还是少刷点手机吧”，虽然这只是苍白无力的 一句关心。
我爸生于70年代，没怎么读过书，小学文凭。现在年近五十，经常带着鸭舌帽，依然遮不住后脑勺斑白的头发。虽然他经常用手机，但是很多东西依然搞不明白，需要找身边的年轻人来帮忙设置手机。
一个50多岁的人，人生过了大半。面对现在飞速发展的社会，很多东西都已经无法适应。对于他自己来说，也基本上无法改变自己。从第七次人口普查的数据中可以看出，在2020年60+的人口已经占比接近14亿人口的20%了，随着时间的推移，这个占比只会增大。
对于我爸这类的人，即使刷的眼睛疼，也无法控制自己，还是一直不停的刷。
由此可见，像这种大公司，制作的超级App有多可怕。能够一直持续的让大脑保持短期兴奋。这种超级App，背后都是心理学家、计算机学家、数据科学家等。 这些专家对待普通大众，就像哥伦布对待印第安人。
因为我发现他们没有什么信仰，也没有任何崇拜的形象，人们又都很温和，他们无邪得不知道什么是邪恶，从不侵害别人，也不懂得偷窃，没有打斗，特别的温顺 《哥伦布日记》
或许几十年以后，大部分人的大脑已经退化，也不需要有思考能里。只需要机械的按照刺激-&amp;gt;反应去行动。
这种进化是一种潮流，绝大多数人都难以幸免。作为一个独立思考的人，我只能尽量避免被影响，远离社交网络。</description>
    </item>
    
    <item>
      <title>解决 VsCode pwsh终端环境变量不生效问题</title>
      <link>https://wdd.js.org/posts/2023/vscode-pwsh-env-not-work/</link>
      <pubDate>Thu, 16 Nov 2023 08:08:39 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/vscode-pwsh-env-not-work/</guid>
      <description>我在系统的环境变量设置里，用户和系统中，都加入了ELECTRON_MIRROR=https://npmmirror.com/mirrors/electron/这个环境变量。
单独打开windows Terminal应用，使用 env | grep ELE 是能搜到我设置的环境变量的。但是在vscode中，这个环境变量不存在。
我尝试了以下几个方法
重启电脑，无效 配置&amp;quot;terminal.integrated.persistentSessionReviveProcess&amp;quot;: &amp;quot;never&amp;quot;, 然后重启电脑，无效 在终端直接执行code ., 在终端打开vscode, 依然无效 因此，我想起了之前配置的pwsh的配置文件。 可以使用code $PROFILE, 打开pwsh的配置文件。
然后再配置文件中设置环境变量， 之后重启vscode, 环境变量就正常能读取到了。
# 文件名 Microsoft.PowerShell_profile.ps1 $env:ELECTRON_MIRROR=&amp;#34;https://npmmirror.com/mirrors/electron/&amp;#34; 参考 https://www.zhihu.com/question/266858097 </description>
    </item>
    
    <item>
      <title>如何选择，汉王Clear7与文石Leaf3</title>
      <link>https://wdd.js.org/posts/2023/hanvon-clear7-vs-book-leaf3/</link>
      <pubDate>Mon, 06 Nov 2023 09:30:34 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/hanvon-clear7-vs-book-leaf3/</guid>
      <description>购买选择 我的kindle pw4已经用了快三年了，机器性能有些不足，电池也有些不够用了。正逢双十一之际，我觉得可以买一个开放系统的电纸书来用用。
买开放系统的另一个原因是自从亚马逊退出中国后，我用微信读书比较多，也买了微信读书的会员。
开放系统基本上都是基于安卓系统定制的，可以选择的厂商比较多。
最终筛选下来，我选择了汉王clear7和文石leaf3， 我下单了两个，觉得先体验一下，然后在退一个。
然而用了不到两天之后，我还是决定把两个机器都给退了，继续用我的kindle pw4。
选择因素 就我个人而言，电子书最为重要的选择因素有以下三点。
显示效果: 说实在的，现在的电子书基本上都是carta1200、300ppi、冷暖光。基本上从显示效果上来说，各大厂家都是半斤八两。就我自己体验而言，我并没有发现汉王的显示效果和文石leaf3有何不同。 握持手感: 外观影响握持手感，外观一般分为两类，一类是就是平板设计，像kindle paperwhite系列。另一类就是书脊式设计，握持更舒适，像kindle os3, 汉王clear7之类的。 简洁系统: 电子书并不是手机，不需要太多的功能，功能太多反而成为累赘 稳定性: 点子产品难免被摔、或者淋水，对于这些意外情况，如果产品非常脆弱，那么很大可能会损失大笔的金额。 续航 文石的缺点 文石和汉王的两款产品，拿到手开机不到一小时，我就决定先退了文石。
原因有以下几点
显示效果文石和汉王差不多，没啥突出亮点 握持手感文石肯定比不过汉王的书脊式设计, 并且汉王更轻 文石的系统太复杂，设置太多，甚至还有个iphone类似的小白点设计，小白点点击之后展开很多图标，每个图标我都不知道做什么的 掉电速度，文石的电量肉眼可见的在不断减少 汉王的缺点 微信读书功能阉割, 这不是汉王的问题，而是微信读书自身的问题。例如书架页面，书籍只有一个排序的顺序，就是按照最近阅读的排序。而无法像ios或者安卓app一样能够按照阅读进度排序，另外也没有阅读时长分析的功能。 另外我也注意到，微信读书电纸书版，扫码登录的有效期是24小时，我不知道这是不是意味着24小时之后我又要重新扫码。
触感光滑，汉王的背板的触感让人感觉非常光滑，感觉稍不注意就会滑下去的样子。完全没有kindle pw4那种拿在手机，就粘在手上的感觉。所以我觉得，买汉王，就必须要买一个保护套，但是官方卖的保护套也太贵了吧，居然要110多块，这点有点像割韭菜。什么保护套能卖那么贵，都快赶上十分之一的电纸书的价格了。
词典缺陷，汉王的词典也是我要吐槽的功能之一，只能把单词的原型加入到单词本，单词来个复数或者过去分词，就不能加入单词本了。kindle的生词本，所有单词，无论什么形式都能加入单词本。
掉电速度, 从昨晚五点多开机，到今天早上，基本上没到一天，电池已经掉电接近40%了
自动关机, 为了省电，汉王在2小时不使用后，会自动关机。然而这个开机时间就有点久，你可设想一下，每天早上，你想看书的时候，你都要等几十秒的开机时间，那你能受得了吗？
按钮反馈，松松垮垮, 触感没有一致性体验
结论 目前而言，国产的电纸书系统，除了开放的系统之外，其他各个方面还是存在与kindle有较大的差距。
当然，如果你从未使用过kindle系列的产品，国产的电纸书还是值得买的。</description>
    </item>
    
    <item>
      <title>没有免费的Obsidian</title>
      <link>https://wdd.js.org/posts/2023/no-free-obsidian/</link>
      <pubDate>Wed, 25 Oct 2023 16:39:10 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/no-free-obsidian/</guid>
      <description>我看过很多介绍obsidian的文章，除了外观漂亮，功能强大，最为着重前调的就是个人用户免费了。
对于个人用户，真的免费吗？ 还是说人家并不是免费，只是我们在白嫖罢了。
我们看看官网关于商业付费的详细解释：
Obsidian 对于个人是免费的。但是，对于那些拥有两名及以上员工的公司或组织，以商业目的使用 Obsidian 的话，则需要购买商用许可证。所谓商业目的，指的是任何与工作相关的活动，比如记录会议内容、项目笔记，或是创建组织 Wiki 等。与这些活动相关的笔记记录、文档管理、知识管理等都可以视为以商用目的使用 Obsidian。 &amp;ndash;参考商用许可证
所以，大部分人，包括我都是听话一半，只看前面，不看后面的但是。
对于大部分上班族来说，如果你再用obsidian，我不太相信你从来没有在obsidian里记录一些工作内容。
对我个人来说，虽然我的有几百条笔记和工作无关。但是也免不了有一些是和工作有关的的。比如对于某个线上问题的分析，比如记录了一些工作账号信息等等。
在关于商业付费的例子上，官方还举出了贴心的给出了栗子。
问题5：我使用 Obsidian 储存所有的知识，无论是个人的还是工作/专业相关的（因为太难区分），我需要购买商用许可证吗？
回答：如果你的笔记中有内容直接与公司项目相关，并且该公司拥有两名及以上员工，那么你需要购买商用许可证。
综上所述，即使是个人使用，免费的条件也是极为苛刻的。
你的笔记不能包含任何商业目的的信息 你可以包含商业目的的信息，但前提是你的公司只有你一个人 假如你是个用Obisian的上班族，我觉得极大的可能你并不符合免费用户的条件。
或者有一天，当你大学毕业了，进入工作环境，你如果还继续用之前的仓库，那你也不再符合免费用户的条件。
所以说，不要再逢人就说Obsidian是免费的了。
Obsidian并不免费，只是我们大部分人都在白嫖罢了。
我也并不是不愿意花钱，如果要付钱的话，我更想买typeora。
因为typeora是买断机制，一次性付费89元，终身包用，免费升级，最多可以再三台设备上使用
Obsidian是订阅机制，每年商业使用要50美元，也就是将近400人民币。</description>
    </item>
    
    <item>
      <title>MacBook icloud 同步卡死， 请尝试重启电脑</title>
      <link>https://wdd.js.org/posts/2023/macbook-icloud-sync-stuck/</link>
      <pubDate>Sun, 20 Aug 2023 13:07:40 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/macbook-icloud-sync-stuck/</guid>
      <description>环境说明 MacBook Pro M2 系统版本 13.4.1 网络环境为wifi 操作步骤 我往icloud的文件夹下，粘贴几个文件夹，文件的内容挺多的，然后finder上显示icloud的状态就一直是处于同步中了。
等了好久，同步的过程似乎卡住了。
网上看了一些解决方案，似乎都没啥作用。
我想起来以前的同样的一次卡顿同步的解决方案：重启电脑
于是，我重启了一次电脑，再次开机，打开finder, icloud文件状态非常快同步完了。</description>
    </item>
    
    <item>
      <title>困在coc错误弹窗中</title>
      <link>https://wdd.js.org/vim/stuck-in-error-msgfloat-window/</link>
      <pubDate>Mon, 10 Jul 2023 12:27:47 +0800</pubDate>
      
      <guid>https://wdd.js.org/vim/stuck-in-error-msgfloat-window/</guid>
      <description>请注意，VIM的光标现在位于错误弹窗上了。光标只能左右移动，无法上线移动。 我的光标被困在了错误提示框中。
因为错误提示只有一行，所以无法上下移动。
一直以来，我并没有把错误提示框也看成一个窗口，所以我可能多次按了ctrl + w w, 然后光标跳转到了错误提示框上。
正常的错误提示框，当光标不在关键词上时，错误弹窗会自动关闭的。 但是由于我已经进入了错误弹窗里面。 所以除非按窗口切换的快捷键，我会始终困在这个错误窗口中。
我觉得，VIM实在是太博大精深了。很多概念性的理解不到位，就会越到很多困难。 这些困难会给人造成极大的挫折感。
能解决困难，则学到东西。
否则就只能放弃VIM, 回到VScode的怀抱中。
但是，我已经习惯了不使用鼠标的快捷编辑方式。
我只能学会解决并适应VIM， 并且接受VIM的所有挑战。</description>
    </item>
    
    <item>
      <title>VIM typescript 跳转到定义</title>
      <link>https://wdd.js.org/vim/typescript-go-to-definition/</link>
      <pubDate>Mon, 10 Jul 2023 09:30:46 +0800</pubDate>
      
      <guid>https://wdd.js.org/vim/typescript-go-to-definition/</guid>
      <description>在VScode中，可以使用右键来跳转到typescript类型对应的定义，但是用vim的gd命令却无法正常跳转。
因为无法正常跳转的这个问题，我差点放弃了vim。
然而我想别人应该也遇到类似的问题。
我的neovim本身使用的是coc插件，然后我就再次到看看官方文档，来确定最终有没有解决这个问题的方案。
功夫不负有心人。
我发现官方给的例子中，就包括了如何配置跳换的配置。
首先说明一下，我本身就安装了coc-json coc-tsserver这两个插件，所以只需要将如下的配置写入init.vim
&amp;#34; GoTo code navigation nmap &amp;lt;silent&amp;gt; gd &amp;lt;Plug&amp;gt;(coc-definition) nmap &amp;lt;silent&amp;gt; gy &amp;lt;Plug&amp;gt;(coc-type-definition) nmap &amp;lt;silent&amp;gt; gi &amp;lt;Plug&amp;gt;(coc-implementation) nmap &amp;lt;silent&amp;gt; gr &amp;lt;Plug&amp;gt;(coc-references) 这样的话，在普通模式，按gy这个快捷键，就能跳转到对应的类型定义，包括某个npm包的里面的类型定义，非常好用。
亲测有效。</description>
    </item>
    
    <item>
      <title>安装NodeJS, N命令似乎卡住了</title>
      <link>https://wdd.js.org/posts/2023/n-stucked/</link>
      <pubDate>Sun, 09 Jul 2023 14:20:45 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/n-stucked/</guid>
      <description>我一般会紧跟着NodeJS官网的最新版，来更新本地的NodeJS版本。
我的系统是ubuntu 20.4, 我用tj/n这个工具来更新Node。
但是这一次，这个命令似乎卡住了。
我排查后发现，是n这个命令在访问https://nodejs.org/dist/index.tab这个地址时，卡住了。
请求超时，因为默认没有设置超时时长，所以等待了很久才显示超时的报错，表现象上看起来就是卡住了。
首先我用dig命令查了nodejs.org的dns解析，我发现是正常解析的。
然后我又用curl对nodejs官网做了一个测试，发现也是请求超时。
curl -i -m 5 https://nodejs.org curl: (28) Failed to connect to nodejs.org port 443 after 3854 ms: 连接超时 这样问题就清楚了，然后我就想起来npmirrror上应该有nodejs的镜像。 在查看n这个工具的文档时，我也发现，它是支持设置mirror的。
其中给的例子用的就是淘宝NPM
就是设置了一个环境变量。然后执行source ~/.zshrc
export N_NODE_MIRROR=https://npmmirror.com/mirrors/node 但是，我发现在命令行里用echo可以打印N_NODE_MIRROR这个变量的值，但是在安装脚本里，还是无法获取设置的这个mirror。
我想或许和我在执行sudo n lts时的sudo有关，这个.zshrc在sudo这种管理员模式下是不生效的。普通用户的环境变量也不会继承到sudo执行的环境变量里
最后，我用sudo -E n lts, 成功的从npmmirror上更新了nodejs的版本。
关于curl超时的这个问题，我也给n仓库提出了pull request, https://github.com/tj/n/pull/771</description>
    </item>
    
    <item>
      <title>JS运行时构建独立二进制程序比较</title>
      <link>https://wdd.js.org/posts/2023/js-runtime-build-executable/</link>
      <pubDate>Thu, 01 Jun 2023 13:48:00 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/js-runtime-build-executable/</guid>
      <description>很早以前，要运行js，则必须安装nodejs，且没什么办法可以把js直接构建成一个可执行的文件。
后来出现一个pkg的npm包，可以用来将js打包成可执行的文件。
我好像用过这个包，但是似乎中间出过一些问题。
现在是2023年，前端有了新的气象。
除了nodejs外，还有其他的后来新秀，如deno， 还有最近表火的bun
另外nodejs本身也开始支持打包独立二进制文件了，但是需要最新的20.x版本，而且我看了它的使用介绍文档，single-executable-applications, 看起来是有有点复杂，光一个构建就写了七八步。
所以今天只比较一些deno和bun的构建出的文件大小。
准备的js文件内容
// app.js console.log(&amp;#34;hello world&amp;#34;) deno构建指令: deno compile --output h1 app.js, 构建产物为h1 bun构建指令: bun build ./app.js --compile --outfile h2, 构建产物为h2
-rw-r--r--@ 1 wangduanduan staff 26B Jun 1 13:34 app.js -rwxrwxrwx@ 1 wangduanduan staff 78M Jun 1 13:59 h1 -rwxrwxrwx@ 1 wangduanduan staff 45M Jun 1 14:01 h2 源代码为26b字节
deno构建相比于源码的倍数: 3152838 bun构建相比于源码的翻倍: 1804415 deno构建的可执行文件相比bun翻倍：1.7 参考 https://bun.sh/docs/bundler/executables https://deno.com/manual@v1.34.1/tools/compiler https://nodejs.org/api/single-executable-applications.html </description>
    </item>
    
    <item>
      <title>Build Docker Image With Libpcap</title>
      <link>https://wdd.js.org/golang/build-docker-image-with-libpcap/</link>
      <pubDate>Mon, 08 May 2023 11:45:23 +0800</pubDate>
      
      <guid>https://wdd.js.org/golang/build-docker-image-with-libpcap/</guid>
      <description>常规构建 一般情况下，我们的Dockerfile可能是下面这样的
这个Dockerfile使用了多步构建，使用golang:1.19.4作为构建容器，二进制文件构建成功后，单独把文件复制到alpine镜像。 这样做的好处是最后产出的镜像非常小，一般只有十几MB的样子，如果直接使用golang的镜像来构建，镜像体积就可能达到1G左右。 FROM golang:1.19.4 as builder ENV GO111MODULE=on GOPROXY=https://goproxy.cn,direct WORKDIR /app COPY . . RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o run . FROM alpine:3.14.2 WORKDIR /app COPY encdec run.sh /app/ COPY --from=builder /app/run . EXPOSE 3000 ENTRYPOINT [&amp;#34;/app/run&amp;#34;] 依赖libpcap的构建 如果使用了程序使用了libpcap 来抓包，那么除了我们自己代码产生的二进制文件外，可能还会依赖libpcap的文件。常规打包就会报各种错误，例如文件找不到，缺少so文件等等。
libpcap是一个c库，并不是golang的代码，所以处理起来要不一样。
下面直接给出Dockerfile
# 构建的基础镜像换成了alpine镜像 FROM golang:alpine as builder # 将alpine镜像换清华源，这样后续依赖的安装会加快 RUN sed -i &amp;#39;s/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g&amp;#39; /etc/apk/repositories # 安装需要用到的C库，和构建依赖 RUN apk --update add linux-headers musl-dev gcc libpcap-dev # 使用国内的goproxy ENV GO111MODULE=on GOPROXY=https://goproxy.</description>
    </item>
    
    <item>
      <title>VScode激活Tab更容易区分</title>
      <link>https://wdd.js.org/posts/2023/vscode-highlight-tab/</link>
      <pubDate>Tue, 18 Apr 2023 13:43:07 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/vscode-highlight-tab/</guid>
      <description>默认情况下VScode的tab栏，当前的颜色会更深一点。如下图所示，第三个就是激活的。
但是实际上并没有太高的区分度，特别是当显示屏有点反光的时候。
我想应该不止一个人有这个问题吧
看了github上，有个人反馈了这个问题，https://github.com/Microsoft/vscode/issues/24586
后面有人回复了
&amp;#34;workbench.colorCustomizations&amp;#34;: { &amp;#34;tab.activeBorder&amp;#34;: &amp;#34;#ff0000&amp;#34;, &amp;#34;tab.unfocusedActiveBorder&amp;#34;: &amp;#34;#000000&amp;#34; } 上面就是用来配置Tab边界的颜色的。
看下效果，当前激活的Tab下有明显的红线，是不是更容易区分了呢</description>
    </item>
    
    <item>
      <title>行位结束符引起的问题</title>
      <link>https://wdd.js.org/posts/2023/tips-about-cr-lf/</link>
      <pubDate>Mon, 16 Jan 2023 15:03:03 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2023/tips-about-cr-lf/</guid>
      <description>CRLF 二进制 十进制 十六进制 八进制 字符/缩写 解释 00001010 10 0A 012 LF/NL(Line Feed/New Line) 换行键 00001101 13 0D 085 CR (Carriage Return) 回车键 CR代表回车符，LF代表换行符。
这两个符号本身都是不可见的。
如果打印出来
CR 会显示 \r LF 会显示 \n 不同系统的行结束符 Linux系统和Mac换行符是 \n Windows系统的换行符是 \r\n 如何区分文件的换行符？ 可以使用od命令
od -bc index.md 假如文件的原始内容如下
- 1 - 2 注意012是八进制的数，十进制对应的数字是10，也就是换行符。
0000000 055 040 061 012 055 040 062 - 1 \n - 2 0000007 如果用vscode打开文件，也能看到对应的文件格式，如LF。
换行符的的差异会导致哪些问题？ shell脚本问题 如果bash脚本里包含CRLF, 可能导致脚本无法解析等各种异常问题。
例如下面的报错，docker启动shell脚本可能是在windows下编写的。所以脚本无法
standard_init_linux.go:211: exec user process caused &amp;#34;no such file or directory&amp;#34; 如何把windows文件类型转为unix?</description>
    </item>
    
    <item>
      <title>Edge浏览器双击标签栏 关闭标签页</title>
      <link>https://wdd.js.org/posts/2022/12/double-click-close-tab/</link>
      <pubDate>Wed, 07 Dec 2022 09:17:59 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/12/double-click-close-tab/</guid>
      <description>在设置里搜索双击，如果有使用双击关闭浏览器选项卡， 则开启。
对于用鼠标关闭标签页来说，的确可以提高极大的效率。</description>
    </item>
    
    <item>
      <title>为什么我不再使用语雀</title>
      <link>https://wdd.js.org/posts/2022/12/why-i-dont-not-use-yuque-any-more/</link>
      <pubDate>Tue, 06 Dec 2022 21:10:38 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/12/why-i-dont-not-use-yuque-any-more/</guid>
      <description>我在2019年的六月份时候，开始使用语雀。
一路走来，我见证了语雀的功能越来越多，但是于此同时，我也越来越讨厌语雀。
2022年12月初，我基本上把语雀上的所有内容都迁移到我的hugo博客上。
我的博客很乱，也很多。我写了一个脚本，一个一个知识库的搬迁，总体速度还算快，唯一不便的就是图片需要一个一个复制粘贴。
有些图片是用语雀的绘图语言例如plantuml编写的，就只能截图保存了。
总之，我也是蛮累的。
简单列一下我不喜欢语雀的几个原因:
性能差，首页渲染慢，常常要等很久，首页才能打开 产品定位混乱，随意更改用户数据 我记得有时候我把知识库升级成了空间，过了一段时间，不知道为什么空间由变成了知识库。 数字花园这个概念真的很烂。我好好的个人主页，某一天打开，大变样，换了个名字，叫做数字花园。甚至没有给用户一个选择保留老版本的个人主页的权利。太不尊重用户了！！ 就好像你下班回家，看见房门被人撬开，你打开房门，看见有人在你的客厅种满大蒜，然后还兴高采烈的告诉你，看，这是您的数字菜园！多好，以后不用买蒜了。 会员的流量计费规则， 或许现在的计费规则已经变了，我也没有再充会员，但是再以前。即使是会员，也是按流量计费的。什么叫按流量计费，假如你的一篇博客里上传了一张1mb的图片，即使你后来把这个图片删了，这1mb的流量还是会存在。而且流量是一直往上涨的，还不像运营商，每月一号给你清零一次的机会。 </description>
    </item>
    
    <item>
      <title>模块传参的重构</title>
      <link>https://wdd.js.org/opensips/3x/module-args/</link>
      <pubDate>Sat, 03 Dec 2022 21:01:02 +0800</pubDate>
      
      <guid>https://wdd.js.org/opensips/3x/module-args/</guid>
      <description>写过opensips脚本的同学，往往对函数的传参感到困惑。
例如：
ds_select_dst()可以接受整数或者值为正数的变量作为第一个参数，但是nat_uac_test()的第一个参数就只能是整数，而不能是变量 为什么rl_check()可以接受格式化的字符串，而save()只能接受字符串。 为什么ds_select_dst(&amp;quot;1&amp;quot;, &amp;quot;4&amp;quot;) 作为整数也要加上双引号？ 为什么变量要加上双引号？ ds_select_dst(&amp;quot;$var(aa)&amp;quot;, &amp;quot;4&amp;quot;) 为什么t_on_branch(&amp;quot;1&amp;quot;)路由的钩子要加上双引号？ 为什么route(go_to_something);这里又不需要加上引号？ ds_select_dst(&amp;#34;1&amp;#34;, &amp;#34;0&amp;#34;); $var(aa)=1; ds_select_dst(&amp;#34;$var(aa)&amp;#34;, &amp;#34;0&amp;#34;); rl_check(&amp;#34;gw_$ru&amp;#34;, &amp;#34;$var(limit)&amp;#34;); #格式化的gw_$ru save(&amp;#34;location&amp;#34;); #单纯的字符串作为参数 从3.0开始，传参可以更加自然。
整数可以直接传参，不用加双引号 do_something(1, 1); 输入或者输出的$var(), 不用加双引号，加了反而会报错 do_something($var(a), $var(b)); 格式化字符串，需要加双引号 do_something(1, &amp;#34;$var(bb)_$var(b)&amp;#34;); 参考 https://blog.opensips.org/2019/11/05/the-module-function-interface-rework-in-opensips-3-0/ https://www.opensips.org/Documentation/Script-Syntax-3-0# </description>
    </item>
    
    <item>
      <title>Pdf学习资料</title>
      <link>https://wdd.js.org/opensips/pdf/</link>
      <pubDate>Sat, 03 Dec 2022 16:02:18 +0800</pubDate>
      
      <guid>https://wdd.js.org/opensips/pdf/</guid>
      <description> TelNYX.pdf OpenSIPS 2.3 mediasoup Cutting Edge WebRTC Video COnferencing FreeSWITCH-driven routing in OpenSIPS Voicenter: Contact center on Steroids Vlad_Paiu-Distributed_OpenSIPS_Systems_Cluecon14.pdf Vlad_Paiu-OpenSIPS_Summit_Austin_2015-Async.pdf Ionut_Ionita-OpenSIPS_Summit2017-Capturing_beyond_SIP FLAVIO_GONCALVES-Fraud_in_VoIP_Today.pdf Alexandr_Dubovikov-OpenSIPS_Summit2017-RTC_Threat_Intelligence_Exchange.pdf OpenSIPS_LoadBalancing.pdf Vlad_Paiu-OpenSIPS_Summit_2104-OpenSIPS_End_User_Services.pdf Razvan_Crainea-OpenSIPS_Summit2017-From_SIPI_Trunks_to_End_Users.pdf Razvan_Crainea-OpenSIPS_Summit-Scaling_Asterisk.pdf Vlad_Paiu-OpenSIPS_Summit-Service_Enabling_for_Asterisk.pdf Jonas_Borjesson-OpenSIPS_Summit_Austin_2015.pdf Michele_Pinasi-OpenSIPS_Summit2017-How_we_did_VoIP.pdf Bogdan_Iancu-OpenSIPS_Summit_Keynotes.pdf Giovanni_Maruzselli-OpenSIPS_Summit2017-Scaling_FreeSWITCHes.pdf Maksym_Sobolyev-OpenSIPS_Summit2017-Sippy_Labs_update.pdf docker-cluster.pdf voip malware attack tool .pdf Bogdan_Iancu-OpenSIPS_Summit-OpenSIPS_2_1.pdf Pete_Kelly-OpenSIPS_Workshop_Chicago_2015-Calling_Cards_B2BUA.pdf Bogdan_Iancu-OpenSIPS_Summit-keynotes.pdf Alex_Goulis-Opensips_CNAME.pdf OpenSIPS_2.0_Framework.pdf Norman_Brandinger-OpenSIPS_Summit_2014-Advanced_SIP_Routing_with_OpenSIPS_modules.pdf </description>
    </item>
    
    <item>
      <title>西安之旅 不仅有羊肉泡馍 也有长恨歌</title>
      <link>https://wdd.js.org/posts/2022/12/xian-travel/</link>
      <pubDate>Fri, 02 Dec 2022 20:38:46 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/12/xian-travel/</guid>
      <description>一年过半以后，偶然打开微信公众号，看到草稿箱里的篇文章。我才回想起去年带女友去西安的那个遥远的夏天。
如今女友已经变成老婆，这篇文章我才想起来发表。
day 1 钟楼 鼓楼 回民街 那是六月末的时候，和女友一起坐火车去了趟西安。
为什么要去西安呢？据吃货女友说，西安有非常多的好吃的。所以人生是必须要去一趟的。
清晨，我们从南京南站出发坐动车，一路向西，坐了5个多小时，到达西安北站。
路上我带了一个1500ml的水瓶，以及1500ml的酸奶。
女友吐槽说，还好没做飞机，不然我就像宝强一样，要在机场干完一大瓶酸奶了。
下了动车，立即前往钟楼订的宾馆，放置行李。
西安钟楼位于西安市中心，是中国现存钟楼中形制最大、保存最完整的一座。建于明太祖洪武十七年，初建于今广济街口，与鼓楼相对，明神宗万历十年整体迁移于今址。
沿着钟楼附近，我们逛了一圈回民街。
回民街是西安著名的美食文化街区，是西安小吃街区。
西安回民街作为西安风情的代表之一，是回民街区多条街道的统称，由北广济街、北院门、西羊市、大皮院、化觉巷、洒金桥等数条街道组成，在钟鼓楼后。
钟楼
day 2 大唐芙蓉城 大唐不夜城 大雁塔 大唐芙蓉城是一座仿唐建筑，里面有许多景点，或许我们不应该早上来，因为上午太热了。
唯一庆幸的是，我们带了一个很大的水杯，而且芙蓉城里提供免费的开水，所以我们才没有被渴死。
大唐芙蓉城 西游师徒四人 雕塑
傍晚的 大唐不夜城
夜幕降临的 大唐不夜城
遗憾之一：大雁塔没有去看，因为当时正在维修，周围全是脚手架。 遗憾之二：没有到陕西历史博物馆看看，因为没有早点预约
女友埋怨我说我不早点做攻略，害得这么多景点去不了。
我说我是做了攻略的，还记在备忘录里面呢。
女友打开我的备忘录一看，笑出眼泪说：你做的啥狗屁攻略，就这几个字！男人果然靠不住！
我说: 这你就不懂了吧，啥都写清楚，一个一个点打卡多没意思。
day3 华清宫 兵马俑 长恨歌 由于西安攻略做的太过肤浅，所以第二天晚上决定直接跟团。在网上买了两张华清宫兵马俑和长恨歌的一日游。
说实在的，华清宫没啥意思，都是洗澡池子。
蒋介石洗过澡的池子，杨贵妃的洗澡池子，唐明皇的洗澡池子，大臣们的洗澡池子。
逛完之后，下午我们坐着旅游大巴，前往兵马俑。
一号坑
一号坑
一号坑
一号坑
一号坑
兵马俑有三个坑。
一号坑最大，兵马俑也是最多的。然而当时游客比肩接踵，加上天气炎热，大家都在里面像蒸桑拿一样。
出了一号坑，我心里想：这么大个坑，这么热为啥不装空调，难道是因为要保护文物吗？
后来据博物馆的讲解员介绍：不装空调是因为审核手续复杂，可能要要个几十年手续才能完成。像二号坑和三号坑都已经装好空调了。
二号坑真的是个坑，没有兵马俑，仅仅是个大坑。
三号坑比较小，仅有几个陶俑。
长恨歌实际上是一个大型的室外表演，由白居易的《长恨歌》演绎而来，讲述唐明皇和杨贵妃的爱恨情长。灯光绚丽，舞蹈优美，感人至深。
关于西安美食就很多了
毛笔酥
六大碗
毛笔酥 酸梅汤</description>
    </item>
    
  </channel>
</rss>

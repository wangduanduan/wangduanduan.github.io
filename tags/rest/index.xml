<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Rest on 洞香春</title>
    <link>https://wdd.js.org/tags/rest/</link>
    <description>Recent content in Rest on 洞香春</description>
    <image>
      <title>洞香春</title>
      <url>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <lastBuildDate>Thu, 07 Jun 2018 22:35:08 +0800</lastBuildDate>
    <atom:link href="https://wdd.js.org/tags/rest/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Restful API 架构思考</title>
      <link>https://wdd.js.org/posts/2018/06/think-about-restful-api/</link>
      <pubDate>Thu, 07 Jun 2018 22:35:08 +0800</pubDate>
      <guid>https://wdd.js.org/posts/2018/06/think-about-restful-api/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E4%BB%80%E4%B9%88%E6%98%AFrest&#34;&gt;1. 什么是REST?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-rest-api%E6%9C%80%E4%B8%BA%E9%87%8D%E8%A6%81%E7%9A%84%E7%BA%A6%E6%9D%9F&#34;&gt;2. REST API最为重要的约束&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-rest-api-http%E6%96%B9%E6%B3%95-%E4%B8%8E-curd&#34;&gt;3. REST API HTTP方法 与 CURD&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E7%8A%B6%E6%80%81%E7%A0%81&#34;&gt;4. 状态码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-restful%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1&#34;&gt;5. RESTful架构设计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E6%96%87%E6%A1%A3&#34;&gt;6. 文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-%E7%89%88%E6%9C%AC&#34;&gt;7. 版本&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E7%8A%B6%E6%80%81%E4%B8%8E%E6%97%A0%E7%8A%B6%E6%80%81&#34;&gt;8. 深入理解状态与无状态&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9-%E5%8F%82%E8%80%83&#34;&gt;9. 参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;1-什么是rest&#34;&gt;1. 什么是REST?&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;表现层状态转换（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文[1] 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换（REST，英文：Representational State Transfer）是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。&lt;a href=&#34;https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2&#34;&gt;wikipdeia&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://wdd.js.org/img/images/20180607224524_M1yRtD_content_api_for_restful_web_services.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;REST API 不是一个标准或者一个是协议，仅仅是一种风格，一种style。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;RESTful API的简单定义可以轻松解释这个概念。 REST是一种架构风格，RESTful是它的解释。也就是说，如果您的后端服务器具有REST API，并且您（从网站/应用程序）向客户端请求此API，则您的客户端为RESTful。&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://wdd.js.org/img/images/20180607225013_Kuay0l_content_rest_api_design.jpeg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;2-rest-api最为重要的约束&#34;&gt;2. REST API最为重要的约束&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Client-Server&lt;/code&gt; 通信只能由客户端单方面发起，表现为请求-响应的形式&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Stateless&lt;/code&gt; 通信的会话状态（Session State）应该全部由客户端负责维护&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Cache&lt;/code&gt; 响应内容可以在通信链的某处被缓存，以改善网络效率&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Uniform Interface&lt;/code&gt; 通信链的组件之间通过统一的接口相互通信，以提高交互的可见性&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Layered System&lt;/code&gt; 通过限制组件的行为（即每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code-On-Demand&lt;/code&gt; 支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;3-rest-api-http方法-与-curd&#34;&gt;3. REST API HTTP方法 与 CURD&lt;/h1&gt;
&lt;p&gt;REST API 使用POST，GET, PUT, DELETE的HTTP方法来描述对资源的增、查、改、删。
这四个HTTP方法在数据层对应着SQL的插入、查询、更新、删除操作。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

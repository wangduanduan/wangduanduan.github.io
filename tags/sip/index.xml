<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Sip on 洞香春</title>
    <link>https://wdd.js.org/tags/sip/</link>
    <description>Recent content in Sip on 洞香春</description>
    <image>
      <title>洞香春</title>
      <url>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.143.1</generator>
    <language>en</language>
    <lastBuildDate>Sun, 11 Feb 2018 14:44:58 +0800</lastBuildDate>
    <atom:link href="https://wdd.js.org/tags/sip/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>基于 WebRTC 构建 Web SIP Phone</title>
      <link>https://wdd.js.org/posts/2018/02/webrtc-web-sip-phone/</link>
      <pubDate>Sun, 11 Feb 2018 14:44:58 +0800</pubDate>
      <guid>https://wdd.js.org/posts/2018/02/webrtc-web-sip-phone/</guid>
      <description>&lt;h1 id=&#34;0-阅前须知&#34;&gt;0 阅前须知&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;本文并不是教程，只是实现方案&lt;/li&gt;
&lt;li&gt;我只是从WEB端考虑这个问题，实际还需要后端sip服务器的配合&lt;/li&gt;
&lt;li&gt;jsSIP有个非常不错的在线demo, 可以去哪里玩耍，很好玩呢 &lt;a href=&#34;https://tryit.jssip.net/&#34;&gt;try jssip &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://wdd.js.org/img/images/20180211144554_nUwjgc_Screenshot.jpeg&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;1-技术简介&#34;&gt;1. 技术简介&lt;/h1&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;WebRTC&lt;/code&gt;: WebRTC，名称源自&lt;code&gt;网页即时通信&lt;/code&gt;（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的API。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SIP&lt;/code&gt;: &lt;code&gt;会话发起协议&lt;/code&gt;（Session Initiation Protocol，缩写SIP）是一个由IETF MMUSIC工作组开发的协议，作为标准被提议用于创建，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话。2000年11月，SIP被正式批准成为3GPP信号协议之一，并成为IMS体系结构的一个永久单元。SIP与H.323一样，是用于VoIP最主要的信令协议之一。&lt;/li&gt;
&lt;/ul&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://wdd.js.org/img/images/20180211144604_Zdxh2x_Screenshot.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;一般来说，要么使用实体话机，要么在系统上安装基于sip的客户端程序。实体话机硬件成本高，基于sip的客户端往往兼容性差，无法跨平台，易被杀毒软件查杀。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;WebRTC&lt;/code&gt;或许是更好的解决方案，只要一个浏览器就可以实时语音视频通话，这是很不错的解决方案。WebSocket可以用来传递sip信令，而WebRTC用来实时传输语音视频流。&lt;/p&gt;
&lt;h1 id=&#34;2-前端webrtc实现方案&#34;&gt;2. 前端WebRTC实现方案&lt;/h1&gt;
&lt;p&gt;其实我们不需要去自己处理WebRTC的相关方法，或者去处理视频或者媒体流。市面上已经有不错的模块可供选择。&lt;/p&gt;
&lt;h2 id=&#34;21-jssiphttpjssipnet&#34;&gt;2.1 &lt;a href=&#34;http://jssip.net/&#34;&gt;jsSIP&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;jsSIP是JavaScript SIP 库&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img loading=&#34;lazy&#34; src=&#34;https://wdd.js.org/img/images/20180211144616_7c5Pf0_Screenshot.jpeg&#34;&gt;&lt;/p&gt;
&lt;p&gt;功能特点如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以在浏览器或者Nodejs中运行&lt;/li&gt;
&lt;li&gt;使用WebSocket传递SIP协议&lt;/li&gt;
&lt;li&gt;视频音频实时消息使用WebRTC&lt;/li&gt;
&lt;li&gt;非常轻量&lt;/li&gt;
&lt;li&gt;100%纯JavaScript&lt;/li&gt;
&lt;li&gt;使用简单并且具有强大的Api&lt;/li&gt;
&lt;li&gt;服务端支持 OverSIP, Kamailio, Asterisk, OfficeSIP，reSIProcate，Frafos ABC SBC，TekSIP&lt;/li&gt;
&lt;li&gt;是RFC 7118 and OverSIP的作者写的&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是使用JsSIP打电话的例子，非常简单吧&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;// Create our JsSIP instance and run it:

var socket = new JsSIP.WebSocketInterface(&amp;#39;wss://sip.myhost.com&amp;#39;);
var configuration = {
  sockets  : [ socket ],
  uri      : &amp;#39;sip:alice@example.com&amp;#39;,
  password : &amp;#39;superpassword&amp;#39;
};

var ua = new JsSIP.UA(configuration);

ua.start();

// Register callbacks to desired call events
var eventHandlers = {
  &amp;#39;progress&amp;#39;: function(e) {
    console.log(&amp;#39;call is in progress&amp;#39;);
  },
  &amp;#39;failed&amp;#39;: function(e) {
    console.log(&amp;#39;call failed with cause: &amp;#39;+ e.data.cause);
  },
  &amp;#39;ended&amp;#39;: function(e) {
    console.log(&amp;#39;call ended with cause: &amp;#39;+ e.data.cause);
  },
  &amp;#39;confirmed&amp;#39;: function(e) {
    console.log(&amp;#39;call confirmed&amp;#39;);
  }
};

var options = {
  &amp;#39;eventHandlers&amp;#39;    : eventHandlers,
  &amp;#39;mediaConstraints&amp;#39; : { &amp;#39;audio&amp;#39;: true, &amp;#39;video&amp;#39;: true }
};

var session = ua.call(&amp;#39;sip:bob@example.com&amp;#39;, options);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;22-sipjshttpssipjscom&#34;&gt;2.2 &lt;a href=&#34;https://sipjs.com/&#34;&gt;SIP.js&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;sip.js项目实际是fork自jsSIP的，这里主要介绍它的服务端支持情况。其他接口自己自行查阅&lt;/p&gt;</description>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>docker on 洞香春</title>
    <link>https://wdd.js.org/tags/docker/</link>
    <description>Recent content in docker on 洞香春</description>
    <image>
      <url>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 04 Dec 2018 15:05:31 +0000</lastBuildDate><atom:link href="https://wdd.js.org/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Docker镜像批量清理脚本</title>
      <link>https://wdd.js.org/posts/2018/docker-images-clean-up/</link>
      <pubDate>Tue, 04 Dec 2018 15:05:31 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/docker-images-clean-up/</guid>
      <description>使用jenkins作为打包的工具，主机上的磁盘空间总是被慢慢被占满，直到jenkins无法运行。本文从几个方面来清理docker垃圾。
批量删除已经退出的容器 docker ps -a | grep &amp;#34;Exited&amp;#34; | awk &amp;#39;{print $1 }&amp;#39; | xargs docker rm 批量删除带有none字段的镜像 $3一般就是取出每一行的镜像id字段
# 方案1： 根据镜像id删除镜像 docker images| grep none |awk &amp;#39;{print $3 }&amp;#39;|xargs docker rmi # 方案2: 根据镜像名删除镜像 docker images | grep wecloud | awk &amp;#39;{print $1&amp;#34;:&amp;#34;$2}&amp;#39; | xargs docker rmi 方案1，根据镜像ID删除镜像时，有写镜像虽然镜像名不同，但是镜像ID都是相同的，这是后往往会删除失败。所以根据镜像名删除镜像的效果会更好。
删除镜像定时任务脚本 #!/bin/bash # create by wangduanduan # when current free disk less then max free disk, you can remove docker images # GREEN=&amp;#39;\033[0;32m&amp;#39; RED=&amp;#39;\033[0;31m&amp;#39; NC=&amp;#39;\033[0m&amp;#39; max_free_disk=5 # 5G.</description>
    </item>
    
    <item>
      <title>jenkins构建镜像时，如何向镜像中注入动态环境变量？</title>
      <link>https://wdd.js.org/posts/2018/inject-environment-variables-to-docker-from-jenkins-build/</link>
      <pubDate>Mon, 23 Jul 2018 19:23:53 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/inject-environment-variables-to-docker-from-jenkins-build/</guid>
      <description>STEP 1: jenkins Additional Build Arguments jenkins Docker Build and Publish插件有个高级选项，Additional Build Arguments
可以在docker构建时，将额外的参数传递给dockerfile。
$BUILD_NUMBER是jenkins自带的一个环境变量，每次构建后都会加1，如：1，2，3，它是一个动态的变量，不同的构建具有不同的构建序号。
--build-arg my_build_number=&amp;#34;$BUILD_NUMBER&amp;#34; STEP 2: dockerfile arg dockerfile 增加如下参数。如果只做了第一步，但是没有在dockerfile中申明运行时会多传入哪些参数，构建就会失败。
ARG 参数指定了构建时可以传递哪些参数进来，并且可以设置默认值，但是docker构建时传递的参数会覆盖默认值。
ENV 指令将my_build_number设置为一个环境变量，它的值为ARG参数的值。
如果你构建的程序是nodejs项目，你就可以通过process.env.my_build_number获取jenkins构建镜像时传入的参数。
ARG my_build_number=&amp;#39;&amp;#39; ENV my_build_number ${my_build_number} </description>
    </item>
    
    <item>
      <title>Nodejs Express dockerfile最佳实践</title>
      <link>https://wdd.js.org/posts/2018/nodejs-best-dockerfile/</link>
      <pubDate>Thu, 08 Feb 2018 09:28:04 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/nodejs-best-dockerfile/</guid>
      <description>1. 少啰嗦，先看代码 1.1. package.json { &amp;#34;name&amp;#34;: &amp;#34;xxx&amp;#34;, &amp;#34;version&amp;#34;: &amp;#34;0.0.0&amp;#34;, &amp;#34;private&amp;#34;: true, &amp;#34;scripts&amp;#34;: { &amp;#34;start&amp;#34;: &amp;#34;node ./bin/www&amp;#34;, &amp;#34;forever&amp;#34;: &amp;#34;node_modules/forever/bin/forever bin/www&amp;#34; }, &amp;#34;dependencies&amp;#34;: { &amp;#34;async&amp;#34;: &amp;#34;0.9.0&amp;#34;, &amp;#34;body-parser&amp;#34;: &amp;#34;1.13.2&amp;#34;, &amp;#34;compression&amp;#34;: &amp;#34;1.6.2&amp;#34;, &amp;#34;config&amp;#34;: &amp;#34;1.12.0&amp;#34;, &amp;#34;connect-multiparty&amp;#34;: &amp;#34;2.0.0&amp;#34;, &amp;#34;cookie-parser&amp;#34;: &amp;#34;1.3.5&amp;#34;, &amp;#34;debug&amp;#34;: &amp;#34;2.2.0&amp;#34;, &amp;#34;ejs&amp;#34;: &amp;#34;2.3.3&amp;#34;, &amp;#34;express&amp;#34;: &amp;#34;4.13.1&amp;#34;, &amp;#34;forever&amp;#34;: &amp;#34;0.15.3&amp;#34;, &amp;#34;http-proxy-middleware&amp;#34;: &amp;#34;0.17.3&amp;#34;, &amp;#34;log4js&amp;#34;: &amp;#34;0.6.24&amp;#34;, &amp;#34;serve-favicon&amp;#34;: &amp;#34;2.3.0&amp;#34; } } 1.2. dockerfile FROM node:9.2.1-alpine RUN apk update &amp;amp;&amp;amp; apk add bash tzdata \ &amp;amp;&amp;amp; cp -r -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime WORKDIR /app COPY package.</description>
    </item>
    
    <item>
      <title>Nodejs alpine 基础docker镜像构建</title>
      <link>https://wdd.js.org/posts/2018/nodejs-alpine-docker/</link>
      <pubDate>Mon, 29 Jan 2018 14:10:15 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/nodejs-alpine-docker/</guid>
      <description>1. 系统环境 centos7 内核：3.10.0-514.26.2.el7.x86_64 安装docker要求内核版本不低于3.10 2. 安装docker yum install docker // 安装docker systemctl start docker.service // 启动docker systemctl enable docker.service // 设置开机启动 3. Nodejs 镜像选择 REPOSITORY TAG IMAGE ID CREATED SIZE docker.io/node 9.2.1-slim 69c9f9292fa4 3 days ago 230 MB docker.io/node 9.2.1-alpine afdc3aaaf748 3 days ago 67.46 MB docker.io/node latest 727b047a1f4e 3 days ago 675.6 MB docker.io/iron/node latest 9ca501065d18 20 months ago 18.56 MB 选择镜像的标准
官方的 经常维护的 体积小的 要有yarn 和 npm node版本要高 最终选择 node:9.</description>
    </item>
    
  </channel>
</rss>

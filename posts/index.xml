<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on 洞香春</title>
    <link>https://wdd.js.org/posts/</link>
    <description>Recent content in Posts on 洞香春</description>
    <image>
      <url>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://wdd.js.org/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 28 May 2022 21:08:43 +0800</lastBuildDate><atom:link href="https://wdd.js.org/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo博客常见问题以及解决方案</title>
      <link>https://wdd.js.org/posts/2022/hugo-blog-faq/</link>
      <pubDate>Sat, 28 May 2022 21:08:43 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/hugo-blog-faq/</guid>
      <description>如何在markdown中插入图片 在static 目录中创建 images 目录，然后把图片放到images目录中。
在文章中引用的时候
![](/images/qianxun.jpeg#center) Warning 我之前创建的文件夹的名字叫做 img, 本地可以正常显示，但是部署之后，就无法显示图片了。
最后我把img改成images才能正常在网页上显示。</description>
    </item>
    
    <item>
      <title>Shell 教程技巧</title>
      <link>https://wdd.js.org/posts/2022/shell-101/</link>
      <pubDate>Sat, 28 May 2022 12:39:50 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/shell-101/</guid>
      <description>复制文本到剪贴板 sudo apt install xclip vim ~/.zshrc
alias copy=&amp;#39;xclip -selection clipboard&amp;#39; 这样我们就可以用copy命令来考本文件内容到系统剪贴板了。
copy aaa.txt 判断工作区是否clean if [ -z &amp;#34;$(git status --porcelain)&amp;#34; ]; then # Working directory clean else # Uncommitted changes fi </description>
    </item>
    
    <item>
      <title>C和gdb调试</title>
      <link>https://wdd.js.org/posts/2022/c-and-gdb/</link>
      <pubDate>Sat, 28 May 2022 12:35:26 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/c-and-gdb/</guid>
      <description>开启coredump #如果该命令的返回值是0，则表示不开启coredump ulimit -c # 开启coredump ulimit -c unlimited 准备c文件 #include&amp;lt;stdio.h&amp;gt; void crash() { char * p = NULL; *p = 0; } int main(){ printf(&amp;#34;hello world 1&amp;#34;); int phone [4]; phone[232] = 12; crash(); return 0; } 编译执行 gcc -g hello.c -o hello ./hello 之后程序崩溃，产生core文件。
gdb分析 gdb 启动的二进制文件 core文件
gdb ./hello ./core 之后输入： bt full 可以查看到更详细的信息
➜ c-sandbox gdb ./hello ./core GNU gdb (Raspbian 7.12-6) 7.12.0.20161007-git Copyright (C) 2016 Free Software Foundation, Inc.</description>
    </item>
    
    <item>
      <title>Tmux 常见问题以及解决方案</title>
      <link>https://wdd.js.org/posts/2022/tmux-faq/</link>
      <pubDate>Sat, 28 May 2022 12:30:58 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/tmux-faq/</guid>
      <description>oh my tmux 关闭第二键ctrl-a ctrl-a可以用来移动光标到行首的，不要作为tmux的第二键
set -gu prefix2 unbind C-a Tmux reload config :source-file ～/.tmux.conf tmux 显示时间 ctrl b + t tmux从当前目录打开新的窗口 bind &amp;#39;&amp;#34;&amp;#39; split-window -c &amp;#34;#{pane_current_path}&amp;#34; bind % split-window -h -c &amp;#34;#{pane_current_path}&amp;#34; bind c new-window -c &amp;#34;#{pane_current_path}&amp;#34; </description>
    </item>
    
    <item>
      <title>hugo博客增加mermaid 绘图插件</title>
      <link>https://wdd.js.org/posts/2022/02-hugo-add-mermaid/</link>
      <pubDate>Fri, 27 May 2022 11:49:44 +0800</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/02-hugo-add-mermaid/</guid>
      <description>增加mermaid shortcodes 在themes/YourTheme/layouts/shortcodes/mermaid.html 增加如下内容
&amp;lt;script async type=&amp;#34;application/javascript&amp;#34; src=&amp;#34;https://cdn.jsdelivr.net/npm/mermaid@9.1.1/dist/mermaid.min.js&amp;#34;&amp;gt; var config = { startOnLoad:true, theme:&amp;#39;{{ if .Get &amp;#34;theme&amp;#34; }}{{ .Get &amp;#34;theme&amp;#34; }}{{ else }}dark{{ end }}&amp;#39;, align:&amp;#39;{{ if .Get &amp;#34;align&amp;#34; }}{{ .Get &amp;#34;align&amp;#34; }}{{ else }}center{{ end }}&amp;#39; }; mermaid.initialize(config); &amp;lt;/script&amp;gt; &amp;lt;div class=&amp;#34;mermaid&amp;#34;&amp;gt; {{.Inner}} &amp;lt;/div&amp;gt; 在blog中增加如下代码 Warning 注意下面的代码，你在实际写的时候，要把 /* 和 */ 删除 {{/*&amp;lt; mermaid align=&amp;#34;left&amp;#34; theme=&amp;#34;neutral&amp;#34; */&amp;gt;}} pie title French Words I Know &amp;#34;Merde&amp;#34; : 50 &amp;#34;Oui&amp;#34; : 35 &amp;#34;Alors&amp;#34; : 10 &amp;#34;Non&amp;#34; : 5 {{/*&amp;lt; /mermaid &amp;gt;*/}} pie title French Words I Know &#34;</description>
    </item>
    
    <item>
      <title>exec user process caused no such file or diectory</title>
      <link>https://wdd.js.org/posts/2022/docker-exec-user-process/</link>
      <pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2022/docker-exec-user-process/</guid>
      <description>exec user process caused &amp;#34;no such file or diectory&amp;#34; 解决方案： 将镜像构建的 Dockerfile ENTRYPOINT [&amp;quot;/run.sh&amp;quot;] 改为下面的
ENTRYPOINT [&amp;#34;sh&amp;#34;,&amp;#34;/run.sh&amp;#34;] 其实就是加了个sh</description>
    </item>
    
    <item>
      <title>如何学习网络协议？</title>
      <link>https://wdd.js.org/posts/2019/books-about-network-protocol/</link>
      <pubDate>Fri, 18 Jan 2019 21:32:08 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2019/books-about-network-protocol/</guid>
      <description>如何学习网络协议？ 大学时，学到网络协议的7层模型时，老师教了大家一个顺口溜：物数网传会表应。并说这是重点，年年必考，5分的题目摆在这里，你们爱背不背。 考试的时候，果然遇到这个问题，搜索枯肠，只能想到这7个字的第一个字，因为这5分，差点挂科。 后来工作面试，面试官也是很喜欢七层模型，三次握手之类的问题，但是遇到这些问题时，总是觉得很心虚。
1. 协议分层 四层网络协议模型中，应用层以下一般都是交给操作系统来处理。应用层对于四层模型来说，仅仅是冰山一角。海面下巨复杂的三层协议，都被操作系统给隐藏起来了，一般我们在页面上发起一个ajax请求，看见了network面板多了一个http请求，至于底层是如何实现的，我们并不关心。
应⽤层负责处理特定的应⽤程序细节。 运输层运输层主要为两台主机上的应⽤程序提供端到端的通信。 网络层处理理分组在⽹网络中的活动，例例如分组的选路 链路层处理理与电缆(或其他任何传输媒介)的物理理接⼝口细节 下面重点讲一下运输层和网络层
1.1. 运输层的两兄弟 运输层有两个比较重要的协议。tcp和udp。
大哥tcp是比较严谨认真、温柔体贴、慢热内向的协议，发出去的消息，总是一个一个认真检查，等待对方回复和确认，如果一段时间内，对方没有回复确认消息，还会再次发送消息，如果对方回复说你发的太快了，tcp还会体贴的把发送消息的速度降低。
弟弟udp则比较可爱呆萌、调皮好动、不负责任的协议。哥哥tcp所具有的特点，弟弟udp一个也没有。但是有的人说不清哪里好 但就是谁都替代不了，udp没有tcp那些复杂的校验和重传等复杂的步骤，所以它发送消息非常快，而且并不保证对方一定收到。如果对方收不到消息，那么udp就会呆萌的看着你，笑着对你说：我已经尽力了。一般语音而视频数据都是用udp协议传输的，因为音频或者视频卡了一下并不影响整体的质量，而对实时性的要求会更高。
1.2. 运输层和网络层的区别 运输层关注的是端到端层面，及End1到End2，忽略中间的任何点。 网络层关注两点之间的层面，即hop1如何到hop2，hop2如何到hop3 网络层并不保证消息可靠性，可靠性上层的传输层负责。TCP采用超时重传，分组确认的机制，保证消息不会丢失。 从下图tcp, udp, ip协议中，可以发现
传输层的tcp和udp都是有源端口和目的端口，但是没有ip字段 源ip和目的ip只在ip数据报中 理解各个协议，关键在于理解报文的各个字段的含义 1.3. ip和端口号的真正含义 上个章节讲到运输层和网络层的区别，其中端口号被封装在运输层，ip被封装到网络成，
那么端口号和ip地址到底有什么区别呢？
ip用来用来标记主机的位置 端口号用来标记该数据应该被目标主机上的哪个应用程序去处理 1.4. 数据在协议栈的流动 封装与分用 当发送消息时，数据在向下传递时，经过不同层次的协议处理，打上各种头部信息 当接受消息时，数据在向上传递，通过不同的头部信息字段，才知道要交给上层的那个模块来处理。比如一个ip包，如果没有头部信息，那么这个消息究竟是交给tcp协议来处理，还是udp来处理，就不得而知了 2. 深入阅读，好书推荐 《http权威指南》 有人说这本书太厚，偷偷告诉你，其实这本书并厚，因为这本书的后面的30%部分都是附录，这本书的精华是前50%的部分 《图解http》、《图解tcp/ip》这两本图解的书，知识点讲的都是比较通俗易懂的，适合入门 《tcp/ip 详解 卷1》这本书，让你知其然，更知其所以然 《tcp/ip 基础》、《tcp/ip 路由技术》这两本书，会让你从不同角度思考协议 《精通wireshark》、《wireshark网络分析实战》如果你看了很多书，却从来没有试过网络抓包，那你只是懂纸上谈兵罢了。你永远无法理解tcp三次握手的怦然心动，与四次分手的刻骨铭心。 </description>
    </item>
    
    <item>
      <title>呼叫中心简史</title>
      <link>https://wdd.js.org/posts/2019/call-center-brief-history/</link>
      <pubDate>Tue, 15 Jan 2019 21:04:11 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2019/call-center-brief-history/</guid>
      <description>什么是呼叫中心？ 呼叫中心又称为客户服务中心。有以下关键词
CTI 通信网络 计算机 企业级 高质量、高效率、全方位、综合信息服务 呼叫中心历史 1956年美国泛美航空公司建成世界第一家呼叫中心。
阶段 行业范围 技术 功能与意义 第一代呼叫中心 民航 PBX、电话排队 主要服务由人工完成 第二代呼叫中心 银行、生活 IVR(交互式语音应答)、DTMF 显著提高工作效率，提供全天候服务 第三代呼叫中心 CTI(电脑计算机集成) 语音数据同步，客户信息存储与查阅，个性化服务，自动化 第四代呼叫中心 接入电子邮件、互联网、手机短信等 多渠道接入、多渠道统一排队 第五代呼叫中心 接入社交网络、社交媒体(微博、微信等) 文本交谈，音频视频沟通 呼叫中心分类 按呼叫方式分类 外呼型呼叫中心（如电话营销） 客服型呼叫中心（如客户服务） 混合型呼叫中心 （如营销和客服） 按技术架构分类 交换机 板卡 软交换（IPCC） 【交换机类型呼叫中心】</description>
    </item>
    
    <item>
      <title>时间花在哪里，你就会成为什么样的人</title>
      <link>https://wdd.js.org/posts/2018/where-time-you-spend-what-you-will-be/</link>
      <pubDate>Tue, 01 Jan 2019 21:02:08 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/where-time-you-spend-what-you-will-be/</guid>
      <description>2008-2018 十年，往事如昨 2018年已经是昨天，今天是2019的第一天。
2008年已经是10年前，10年前的傍晚，我走在南京仙林的一个大街上，提着一瓶矿泉水，擦着额头的汗水，仰头看着大屏幕上播放着北京奥运会的开幕式。
10年前的夏天，我带着一步诺基亚手机功能机，独自一人去了南京。
坐过绣球公园的石凳，穿过天妃宫的回廊，吹过阅江楼的凉爽的江风，踏着古老斑驳的城墙，在林荫小路的长椅上，我想着10年后我会在哪里？做着什么事情？
往事如昨，而今将近而立，但是依然觉得自己还是10年的那个独自出去玩的小男孩。
2018 读了10年都没有读完的书，五味杂陈 2018年，在我做手术前，我觉得自己出了工作的时间外，大多数时间都在看书。2018年这一年看的书，要比2008到2018年这十年间的看的书都要多。这都归功于我对每天的看书都有定量的计划，一旦按照这个计划实行几个月，积累的效果还是非常明显的。
2018年，手机几乎成为人的四肢之外的第五肢。对大多人来说，上厕所可以不带纸，但是不能不带手机。
各种APP, 都在极力的吸引用户多花点时间在自己身上 信息流充斥着各种毫无营养，专门吸人眼球的垃圾新闻，但是这种新闻的阅读量还是蛮大的 各种借钱，信用卡，花呗等都像青楼的小姐，妩媚的笑容，说道：官人，进来做一做 共享单车，在今年退潮之后，才发现自己都在裸泳 比特币，挖矿机。不知道谁割了谁的韭菜，总希望有下一个傻子来接盘，最后发现自己可能就是最后一个傻子 AI，人工智能很火，放佛就快要进入终结者那样的世界 锤子垮了，曾经吹过的牛逼，曾经理想主义终于脱去那又黑又亮的面具 图灵测试（The Turing test）由艾伦·麦席森·图灵发明，指测试者与被测试者（一个人和一台机器）隔开的情况下，通过一些装置（如键盘）向被测试者随意提问。 进行多次测试后，如果有超过30%的测试者不能确定出被测试者是人还是机器，那么这台机器就通过了测试，并被认为具有人类智能。图灵测试一词来源于计算机科学和密码学的先驱阿兰·麦席森·图灵写于1950年的一篇论文《计算机器与智能》，其中30%是图灵对2000年时的机器思考能力的一个预测，目前我们已远远落后于这个预测。
最后说一下图灵测试，在AI方面，这个测试无人不知。一个机器如果通过了图灵测试，则说明该机器具有了只能。但是三体的作者大刘曾经说过一句话，给我一种醍醐灌顶的感觉，假如一个机器人有能力通过图灵测试，却假装无法通过，你说这个机器是否具有人工智能。所以大刘的这种说法才更加让人恐惧。机器人能通过图灵测试，只说明这个机器人具有了智能。但是现阶段的智能只不过是条件反射，或者是基于概率计算的结果。后者这种能通话测试，却假装无法通过的智能。这不仅仅是智能，而是机器的城府。
有智能的机器并不可怕，有城府的机器人才是真正的可怕。
如果梦中更加幸福快乐，为什么要回到现实 火影的最后，大筒木辉夜使用无限月读将世界上的所有人都带入梦境，每个人的查克拉都被吸取，并作为神树的养料。
如果真的存在大筒木这样的上帝，那么时间就是查克拉。人类唯一真正拥有过的东西，时间，将作为神树的养料，从每个人身上提取。
各种具有吸引力的术，其实可以理解为无限月读，让人沉醉于梦幻中。
如果梦中更加幸福快乐，为什么要回到现实中承受压力与悲哀呢？ 目前我无法回复自己的这个问题，期待2019年我可以得到这个答案。
工作方面 2019年，我会在做一些后端方面的工作，努力加油吧。</description>
    </item>
    
    <item>
      <title>深入理解 JavaScript中的变量、值、函数传参</title>
      <link>https://wdd.js.org/posts/2018/deep-in-javascript-variable-value-arguments/</link>
      <pubDate>Mon, 17 Dec 2018 15:24:15 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/deep-in-javascript-variable-value-arguments/</guid>
      <description>1. demo 如果你对下面的代码没有任何疑问就能自信的回答出输出的内容，那么本篇文章就不值得你浪费时间了。
var var1 = 1 var var2 = true var var3 = [1,2,3] var var4 = var3 function test (var1, var3) { var1 = &amp;#39;changed&amp;#39; var3[0] = &amp;#39;changed&amp;#39; var3 = &amp;#39;changed&amp;#39; } test(var1, var3) console.log(var1, var2, var3, var4) 2. 深入理解原始类型 原始类型有5个 Undefinded, Null, Boolean, Number, String
2.1. 原始类型变量没有属性和方法 // 抬杠, 下面的length属性，toString方法怎么有属性和方法呢？ var a = &amp;#39;oooo&amp;#39; a.length a.toString 原始类型中，有三个特殊的引用类型Boolean, Number, String，在操作原始类型时，原始类型变量会转换成对应的基本包装类型变量去操作。参考JavaScript高级程序设计 5.6 基本包装类型。
2.2. 原始类型值不可变 原始类型的变量的值是不可变的，只能给变量赋予新的值。
下面给出例子
// str1 开始的值是aaa var str1 = &amp;#39;aaa&amp;#39; // 首先创建一个能容纳6个字符串的新字符串 // 然后再这个字符串中填充 aaa和bbb // 最后销毁字符串 aaa和bbb // 而不能理解成在str1的值aaa后追加bbb str1 = str1 + &amp;#39;bbb&amp;#39; 其他原始类型的值也是不可变的, 例如数值类型的。</description>
    </item>
    
    <item>
      <title>WTF!! Vue数组splice方法无法正常工作</title>
      <link>https://wdd.js.org/posts/2018/vue-array-splice-not-work/</link>
      <pubDate>Wed, 12 Dec 2018 20:29:16 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/vue-array-splice-not-work/</guid>
      <description>当函数执行到this.agents.splice()时，我设置了断点。发现传参index是0，但是页面上的列表项对应的第一行数据没有被删除，
WTF！！！ 这是什么鬼！然后我打开Vue Devtools, 然后刷新了一下，发现那个数组的第一项还是存在的。什么鬼？？
removeOneAgentByIndex: function (index) { this.agents.splice(index, 1) } 然后我就谷歌了一下，发现这个splice not working properly my object list VueJs, 大概意思是v-for的时候最好给列表项绑定:key=。然后我是试了这个方法，发现没啥作用。
最终我决定，单步调试，如果我发现该问题出在Vue自身，那我就该抛弃Vue, 学习React了
单步调试中出现一个异常的情况，removeOneAgentByIndex是被A函数调用的，A函数由websocket事件驱动。正常情况下应该触发一次的事件，服务端却发送了两次到客户端。由于事件重复，第一次执行A删除时，实际上removeOneAgentByIndex是执行成功了，但是重复的第二个事件到来时，A函数又往agents数组中添加了一项。导致看起来，removeOneAgentByIndex函数执行起来似乎没有设么作用。而且这两个重复的事件是在几乎是在同一时间发送到客户端，所以我几乎花了将近一个小时去解决这个bug。引起这个bug的原因是事件重复，所以我在前端代码中加入事件去重功能，最终解决这个问题。
我记得之前看过一篇文章，一个开发者调通过回调函数计费，回调函数是由事件触发，但是没想到有时候事件会重发，导致重复计费。后来这名开发者在自己的代码中加入事件去重的功能，最终解决了这个问题。
事后总结：我觉得我不该怀疑Vue这种库出现了问题，但是我又不禁去怀疑。
通过这个bug, 我也学到了第二方法，可以删除Vue数组中的某一项，参考下面代码。
// Only in 2.2.0+: Also works with Array + index. removeOneAgentByIndex: function (index) { this.$delete(this.agents, index) } 另外Vue devtools有时候并不会实时的观测到组件属性的变化，即使点了Refresh按钮。如果点了Refresh按钮还不行，那建议你重新打开谷歌浏览器的devtools面板。</description>
    </item>
    
    <item>
      <title>Node.js 如何找出循环依赖的文件？如何解决循环依赖问题？</title>
      <link>https://wdd.js.org/posts/2018/how-to-fix-circular-dependencies-in-node-js/</link>
      <pubDate>Mon, 29 Oct 2018 09:21:03 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/how-to-fix-circular-dependencies-in-node-js/</guid>
      <description>本文重点是讲解如何解决循环依赖这个问题。关心这个问题是如何产生的，可以自行谷歌。
如何重现这个问题 // a.js const {sayB} = require(&amp;#39;./b.js&amp;#39;) sayB() function sayA () { console.log(&amp;#39;say A&amp;#39;) } module.exports = { sayA } // b.js const {sayA} = require(&amp;#39;./a.js&amp;#39;) sayA() function sayB () { console.log(&amp;#39;say B&amp;#39;) } module.exports = { sayB } 执行下面的代码
➜ test git:(master) ✗ node a.js /Users/dd/wj-gitlab/tools/test/b.js:3 sayA() ^ TypeError: sayA is not a function at Object.&amp;lt;anonymous&amp;gt; (/Users/dd/wj-gitlab/tools/test/b.js:3:1) at Module._compile (module.js:635:30) at Object.Module._extensions..js (module.js:646:10) at Module.load (module.js:554:32) at tryModuleLoad (module.</description>
    </item>
    
    <item>
      <title>shields小徽章是如何生成的？以及搭建自己的shield服务器</title>
      <link>https://wdd.js.org/posts/2018/how-to-make-shields-badge/</link>
      <pubDate>Mon, 29 Oct 2018 09:14:43 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/how-to-make-shields-badge/</guid>
      <description>shields小徽章介绍 一般开源项目都会有一些小徽章来标识项目的状态信息，并且这些信息是会自动更新的。在shields的官网https://shields.io/#/, 上面有各种各样的小图标，并且有很多自定义的方案。
起因：如何给私有部署的jenkins制作shields服务？ 私有部署的jenkins是用来打包docker镜像的，而我想获取最新的项目打包的jenkins镜像信息。但是私有的jenkins项目信息，公网的shields服务是无法获取其信息的。那么如果搭建一个私有的shields服务呢？
第一步：如何根据一些信息，制作svg图标 查看shields图标的源码，可以看到这些图标都是svg格式的图标。然后的思路就是，将文字信息转成svg图标。最后我发现这个思路是个死胡同，
有个npm包叫做，text-to-svg, 似乎可以将文本转成svg, 但是看了文本转svg的效果，果断就放弃了。
最后回到起点，看了shields官方仓库，发现一个templates目录，豁然开朗。原来svg图标是由svg的模板生成的，每次生成图标只需要将信息添加到模板中，然后就可以渲染出svg字符串了。
顺着这个思路，发现一个包shields-lightweight
var shields = require(&amp;#39;shields-lightweight&amp;#39;); var svgBadge = shields.svg(&amp;#39;subject&amp;#39;, &amp;#39;status&amp;#39;, &amp;#39;red&amp;#39;, &amp;#39;flat&amp;#39;); 这个包的确可以生成和shields一样的小徽章，但是如果徽章中有中文，那么中文就会溢出。因为一个中文字符的宽度要比一个英文字符宽很多。
所以我就fork了这个项目，重写了图标宽度计算的方式。shields-less
npm install shields-less var shieldsLess = require(&amp;#39;shields-less&amp;#39;) var svgBadge = shieldsLess.svg({ leftText: &amp;#39;npm 黄河远上白云间&amp;#39;, rightText: &amp;#39;hello 世界&amp;#39; }) var svgBadge2 = shieldsLess.svg({ leftText: &amp;#39;npm 黄河远上白云间&amp;#39;, rightText: &amp;#39;hello 世界&amp;#39;, style: &amp;#39;square&amp;#39; }) var svgBadge2 = shieldsLess.svg({ leftText: &amp;#39;npm 黄河远上白云间&amp;#39;, rightText: &amp;#39;hello 世界&amp;#39;, leftColor: &amp;#39;#e64a19&amp;#39;, rightColor: &amp;#39;#448aff&amp;#39;, style: &amp;#39;square&amp;#39; // just two style: square and plat(default) }) 渲染后的效果，查看在线demo: https://wdd.</description>
    </item>
    
    <item>
      <title>Express代理中间件问题与解决方案</title>
      <link>https://wdd.js.org/posts/2018/express-middleware-order-proxy-problem/</link>
      <pubDate>Sun, 30 Sep 2018 09:41:44 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/express-middleware-order-proxy-problem/</guid>
      <description>前后端分离应用的架构 在前后端分离架构中，为了避免跨域以及暴露内部服务地址。一般来说，我会在Express这层中加入一个反向代理。
所有向后端服务访问的请求，都通过代理转发到内部的各个服务。
这个反向代理服务器，做起来很简单。用http-proxy-middleware这个模块，几行代码就可以搞定。
// app.js Object.keys(proxyTable).forEach(function (context) { app.use(proxyMiddleware(context, proxyTable[context])) }) http-proxy-middleware实际上是对于node-http-proxy的更加简便的封装。node-http-proxy是http-proxy-middleware的底层包，如果node-http-proxy有问题，那么这个问题就会影响到http-proxy-middleware这个包。
最近的bug http-proxy-middleware最近有个问题，请求体在被代理转发前，如果请求体被解析了。那么后端服务将会收不到请求结束的消息，从浏览器的网络面板可以看出，一个请求一直在pending状态。
Cannot proxy after parsing body #299, 实际上这个问题在node-http-proxy也被提出过，而且处于open状态。POST fails/hangs examples to restream also not working #1279
目前这个bug还是处于open状态，但是还是有解决方案的。就是将请求体解析的中间件挂载在代理之后。
下面的代码，express.json()会对json格式的请求体进行解析。方案1在代理前就进行body解析，所有格式是json的请求体都会被解析。
但是有些走代理的请求，如果我们并不关心请求体的内容是什么，实际上我们可以不解析那些走代理的请求。所以，可以先挂载代理中间件，然后挂载请求体解析中间件，最后挂载内部的一些接口服务。
// 方案1 bad app.use(express.json()) Object.keys(proxyTable).forEach(function (context) { app.use(proxyMiddleware(context, proxyTable[context])) }) app.use(&amp;#39;/api&amp;#39;, (req, res, next)=&amp;gt; { }) // 方案2 good Object.keys(proxyTable).forEach(function (context) { app.use(proxyMiddleware(context, proxyTable[context])) }) app.use(express.json()) app.use(&amp;#39;/api&amp;#39;, (req, res, next)=&amp;gt; { }) 总结 经过这个问题，我对Express中间件的挂载顺序有了更加深刻的认识。
同时，在使用第三方包的过程中，如果该包bug，那么也需要自行找出合适的解决方案。而这个能力，往往就是高手与新手的区别。</description>
    </item>
    
    <item>
      <title>IE11跨域检查跨域设置</title>
      <link>https://wdd.js.org/posts/2018/ie-cross-domain-settings/</link>
      <pubDate>Thu, 23 Aug 2018 10:20:10 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/ie-cross-domain-settings/</guid>
      <description>IE11有安全设置中有两个选项，
跨域浏览窗口和框架 通过域访问数据源 如果上面两个选项被禁用，那么IE11会拒绝跨域请求。如果想要跨域成功，必须将上面两个选项设置为启用。
第一步 打开IE11 点击浏览器右上角的齿轮图标 点击弹框上的 Internet选项 第二步 点击安全 点击Internet 点击自定义级别 第三步 找到跨域浏览窗口和框架
如果这项是禁用的，那么要勾选启用。
找到通过域访问数据源
如果这项是禁用的，那么要勾选启用。
最后在点击确定。
最后，如果跨域浏览窗口和框架,通过域访问数据源都启用了，还是无法跨域。那么最好重启一下电脑。有些设置可能在重启后才会生效。</description>
    </item>
    
    <item>
      <title>毕业后，青春像一艘船，沉入海底</title>
      <link>https://wdd.js.org/posts/2018/the-rest-of-your-life/</link>
      <pubDate>Tue, 14 Aug 2018 18:36:40 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/the-rest-of-your-life/</guid>
      <description>大三那年的暑假 大三那年暑假，很多同学都回去了，寝室大楼空空如也。
留在上海的同学都在各自找着兼职的工作，为了不显得无聊，我也在网上随便发了一些简历，试试看运气。
写简历最难写的部分就是写你自己的长处是什么？搜索枯肠，觉得自己似乎也没什特长。感觉大学三年学到一些东西，又感觉什么都没学到。
如果没有特长，总该也有点理想吧，比如想干点什么？ 似乎我也没什么想做的事情。
小时候我们都有理想，慢慢长大后，理想越来越模糊，变得越来越迷茫。
大学里，大部分的人都是在打游戏。我也曾迷恋过打游戏，但是因为自己比较菜，总是被虐，所以放弃了。
但是我也不是那种天天对着笔记本看电视剧的人。
回忆初三那年的暑假 记得，初三的暑假，我参加了一个学校看展的一个免费的计算机培训班。因为培训的老师说，培训结束前会有一个测试，成绩最好的会有几百块的奖励。
为了几百块的奖励，我第一个背诵完五笔拆字法。随后老师教了我们PS, 就是photoshop。当时我的理解就是，ps可以做出很多搞笑的图片。
为了成为一个有能力做出搞笑图片的人。我在高中和大学期间，断断续续的系统的自学了PS。
下面给展示几张我的PS照片
【毕业照】
【帮别人做的艺术照】
【刺客信条 换脸 我自己】
【旅游照 换脸 我自己】
【宿舍楼 上面ps了一条狼】
古玩艺术电商中的店小二 基本上，我的PS技术还是能够找点兼职做的。没过多久，我收到了面试邀请，面试的公司位于一个古玩收藏品市场中。
当然我面试成功了，开出的日薪也是非常诱人，每天35元。
在上海，35元一天的工资，除去来回上下班做地铁和公交，还有中午饭的费用外，基本上不会剩下什么，有时候稍微午饭丰盛点，自己就要倒贴。但是这也是一次不错的尝试，至少有史以来，除去父母以外，我用能力问别人要钱了。
35元的日薪持续很短一段时间，然后我就涨薪了，到达每天100元。在这个做兼职的地方，我最高拿到的日薪是200元。
兼职期间我做了各式各样的工作：
古玩艺术品摄影 海报制作 拍卖图册制作 linux运维 APP UI 设计 网页设计 python爬虫 兼职的日志过得很苦，单是还算充实。虽然工资不高，但是因为还没毕业，也没有奢望过高的工资。
【上图 我在一个古玩店的拍摄玉器的时候，有个小女孩过来找我玩，我随手拍的】
【上图 是在1号线 莲花路地铁站 因为错过了地铁拍的】
【上图 是从1号线 莲花地铁站 转公交拍的】
【每天早上起的很早，能够看到军训的学生在操场上奔跑】
【在古玩店一般都要拍到很晚，因为是按张数算拍照工资，拍的越多，工资越高。还好晚上回公司 打车费用是可以报销的】
【晚上还要回到学校，一般到学校就快晚上10点左右了】
【毕业了，新校区依然很漂亮】
【毕业了，老校区下了一场雨】
【毕业了，青春像一艘船，沉入海底】
【毕业了，我等的人，你在哪里？】</description>
    </item>
    
    <item>
      <title>NodeJS Events 模块笔记</title>
      <link>https://wdd.js.org/posts/2018/deepin-nodejs-events/</link>
      <pubDate>Fri, 10 Aug 2018 10:18:57 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/deepin-nodejs-events/</guid>
      <description>1. 环境 node 8.11.3 2. 基本使用 // 01.js const EventEmitter = require(&amp;#39;events&amp;#39;); class MyEmitter extends EventEmitter {} const myEmitter = new MyEmitter(); myEmitter.on(&amp;#39;event&amp;#39;, () =&amp;gt; { console.log(&amp;#39;an event occurred!&amp;#39;); }); myEmitter.emit(&amp;#39;event&amp;#39;); 输出：
an event occurred! 3. 传参与this指向 emit()方法可以传不限制数量的参数。 除了箭头函数外，在回调函数内部，this会被绑定到EventEmitter类的实例上 // 02.js const EventEmitter = require(&amp;#39;events&amp;#39;) class MyEmitter extends EventEmitter {} const myEmitter = new MyEmitter() myEmitter.on(&amp;#39;event&amp;#39;, function (a, b){ console.log(a, b, this, this === myEmitter) }) myEmitter.on(&amp;#39;event&amp;#39;, (a, b) =&amp;gt; { console.</description>
    </item>
    
    <item>
      <title>JavaScript动态下载文件</title>
      <link>https://wdd.js.org/posts/2018/js-download-file/</link>
      <pubDate>Wed, 27 Jun 2018 09:09:01 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/js-download-file/</guid>
      <description>需求描述 可以把字符串下载成txt文件 可以把对象序列化后下载json文件 下载由ajax请求返回的Excel, Word, pdf 等等其他文件 基本思想 downloadJsonIVR () { var data = {name: &amp;#39;age&amp;#39;} data = JSON.stringify(data) data = new Blob([data]) var a = document.createElement(&amp;#39;a&amp;#39;) var url = window.URL.createObjectURL(data) a.href = url a.download = &amp;#39;what-you-want.json&amp;#39; a.click() }, 从字符串下载文件 从ajax请求中下载文件 </description>
    </item>
    
    <item>
      <title>Restful API 架构思考</title>
      <link>https://wdd.js.org/posts/2018/think-about-restful-api/</link>
      <pubDate>Thu, 07 Jun 2018 22:35:08 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/think-about-restful-api/</guid>
      <description>1. 什么是REST? 2. REST API最为重要的约束 3. REST API HTTP方法 与 CURD 4. 状态码 5. RESTful架构设计 6. 文档 7. 版本 8. 深入理解状态与无状态 9. 参考 1. 什么是REST? 表现层状态转换（REST，英文：Representational State Transfer）是Roy Thomas Fielding博士于2000年在他的博士论文[1] 中提出来的一种万维网软件架构风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换（REST，英文：Representational State Transfer）是根基于超文本传输协议(HTTP)之上而确定的一组约束和属性，是一种设计提供万维网络服务的软件构建风格。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以统一资源标识符访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。wikipdeia
REST API 不是一个标准或者一个是协议，仅仅是一种风格，一种style。
RESTful API的简单定义可以轻松解释这个概念。 REST是一种架构风格，RESTful是它的解释。也就是说，如果您的后端服务器具有REST API，并且您（从网站/应用程序）向客户端请求此API，则您的客户端为RESTful。
2. REST API最为重要的约束 Client-Server 通信只能由客户端单方面发起，表现为请求-响应的形式 Stateless 通信的会话状态（Session State）应该全部由客户端负责维护 Cache 响应内容可以在通信链的某处被缓存，以改善网络效率 Uniform Interface 通信链的组件之间通过统一的接口相互通信，以提高交互的可见性 Layered System 通过限制组件的行为（即每个组件只能“看到”与其交互的紧邻层），将架构分解为若干等级的层。 Code-On-Demand 支持通过下载并执行一些代码（例如Java Applet、Flash或JavaScript），对客户端的功能进行扩展。 3. REST API HTTP方法 与 CURD REST API 使用POST，GET, PUT, DELETE的HTTP方法来描述对资源的增、查、改、删。 这四个HTTP方法在数据层对应着SQL的插入、查询、更新、删除操作。</description>
    </item>
    
    <item>
      <title>记一次如何解决谷歌浏览器占用过高cpu问题过程</title>
      <link>https://wdd.js.org/posts/2018/how-to-fix-google-chrome-very-high-cpu-cost/</link>
      <pubDate>Mon, 04 Jun 2018 17:58:24 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/how-to-fix-google-chrome-very-high-cpu-cost/</guid>
      <description>1. 问题现象 有时候发现mac风扇响的厉害，于是我检查了mac系统的活动监视器，发现Google Chrome Helper占用99%的CPU。
通常来说Chrome如果占用过高的内存，这并不是什么问题，毕竟Chrome的性能以及易用性是建立在占用很多内存的基础上的。但是无论什么程序，持续的占用超过80%的cpu，都是极不正常的。大多数程序都是占用维持在低于10%的CPU。
活动监视器指出问题出现在Chrome浏览器。那么问题可以再次细分为三块。
Chrome系统自身问题 一些插件，例如flash插件，扩展插件 网页程序js出现的问题 2. 从任务管理器着手 其实Chrome浏览器自身也是有任务管理器的，一般来说windows版chrome按住shift+esc就会调出任务管理器窗口。mac版调出任务管理器没有快捷，只能通过Window &amp;gt; Task Manager调出。
调出任务管理器后，发现一个标签页，CPU占用率达到99%， 那就说明，应该是这个标签页中存在持续占用大量CPU计算的程序。
最后找到这个页面，发现该页面背景图是一种动态粒子图。就是基于particles.js做的。我想，终于找到你了。
于是我把这个动态图的相关js代码给注释掉，电脑的风扇也终于变得安静了。
3. 问题总结 问题解决的总结：解决问题的方法时很简单的，基于一个现象，找到一个原因，基于这个原因再找到一个现象，然后一步一步缩小问题范围，逼近最终原因。
机器CPU过高，一般都是可以从任务管理器着手解决。系统的任务管理器可以监控各个程序占用的CPU是否正常，通常程序自身也是有任务管理的。
像谷歌浏览器这种软件，几乎本身就是一个操作系统，所以说它的任务管理器也是必不可少的。Chrome浏览器再带的任务管理器可以告诉你几个关键信息。
任务占用的内存 任务占用的CPU 任务占用的网络流量大小 如果你一打开谷歌浏览器，你的电脑风扇就拼命转，那你最好打开谷歌浏览器的任务管理器看看。
4. 关于动态背景图的思考 动态背景图往往都会给人很酷炫的感觉，但是这种背景图的制作并不是很复杂，如果你使用particles.js来制作，制作一些动态背景图只需要几行代码就可以搞定。但是这种酷炫的背后，CPU也在承受着压力。
particles.js提供的demo效果图，在Chrome中CPU会被提高到100%。
也有几家使用动态背景图的官网。我记得知乎以前就用过动态背景图，但是现在找不到了。另外一个使用动态背景图的是daocloud, CPU也是会在首页飙升到50%。
所谓：强招必自损，动态背景图在给人以炫酷科技感的同时，也需要权衡这种技术对客户计算机的压力。
另外，不要小看JavaScript, 它也可能引起大问题</description>
    </item>
    
    <item>
      <title>IE浏览器不支持location.origin</title>
      <link>https://wdd.js.org/posts/2018/ie-not-support-location-origin/</link>
      <pubDate>Thu, 24 May 2018 14:50:49 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/ie-not-support-location-origin/</guid>
      <description>某些IE浏览器location.origin属性是undefined，所以如果你要使用该属性，那么要注意做个能力检测。
if (!window.location.origin) { window.location.origin = window.location.protocol + &amp;#34;//&amp;#34; + window.location.hostname + (window.location.port ? &amp;#39;:&amp;#39; + window.location.port: &amp;#39;&amp;#39;); }i </description>
    </item>
    
    <item>
      <title>端到端测试哪家强？不容错过的Cypress</title>
      <link>https://wdd.js.org/posts/2018/e2e-testing-hacker-news-with-cypress/</link>
      <pubDate>Mon, 14 May 2018 10:43:02 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/e2e-testing-hacker-news-with-cypress/</guid>
      <description>1. 目前E2E测试工具有哪些？ 项目 Web Star puppeteer Chromium (~170Mb Mac, ~282Mb Linux, ~280Mb Win) 31906 nightmare Electron 15502 nightwatch WebDriver 8135 protractor selenium 7532 casperjs PhantomJS 7180 cypress Electron 5303 Zombie 不需要 4880 testcafe 不需要 4645 CodeceptJS webdriverio 1665 端到端测试一般都需要一个Web容器，来运行前端应用。例如Chromium, Electron, PhantomJS, WebDriver等等。
从体积角度考虑，这些Web容器体积一般都很大。
从速度的角度考虑：PhantomJS, WebDriver &amp;lt; Electon, Chromium。
而且每个工具的侧重点也不同，建议按照需要去选择。
2. 优秀的端到端测试工具应该有哪些特点？ 安装简易：我希望它非常容易安装，最好可以一行命令就可以安装完毕 依赖较少：我只想做个E2E测试，不想安装jdk, python之类的东西 速度很快：运行测试用例的速度要快 报错详细：详细的报错 API完备：鼠标键盘操作接口，DOM查询接口等 Debug方便：出错了可以很方便的调试，而不是去猜 3. 为什么要用Cypress？ Cypress基本上拥有了上面的特点之外，还有以下特点。
时光穿梭 测试运行时，Cypress会自动截图，你可以轻易的查看每个时间的截图 Debug友好 不需要再去猜测为什么测试有失败了，Cypress提供Chrome DevTools, 所以Debug是非常方便的。 实时刷新 Cypress检测测试用例改变后，会自动刷新 自动等待 不需要在使用wait类似的方法等待某个DOM出现，Cypress会自动帮你做这些 Spies, stubs, and clocks Verify and control the behavior of functions, server responses, or timers.</description>
    </item>
    
    <item>
      <title>掌握谷歌搜索高级指令</title>
      <link>https://wdd.js.org/posts/2018/master-google-search-command/</link>
      <pubDate>Thu, 26 Apr 2018 16:56:01 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/master-google-search-command/</guid>
      <description>1. 谷歌搜索指令 2. 基本命令 3. 关键词使用 4. 特殊工具 4.1. define 快速返回关键词定义 4.2. 计算器 4.3. 单位转换 4.4. 时区查询 4.5. 地区查询 4.6. 天气查询 5. 参考 1. 谷歌搜索指令 2. 基本命令 符号 简介 语法 注意点 示例 | 包含A且必须包含B | A +B | A和+之间有空格 | Maxwell +wills | 包含A且不包含B | A -B | A和+之间有空格 | Maxwell -Absolom &amp;quot; &amp;quot; | 完整匹配AB | &amp;ldquo;AB&amp;rdquo; | | &amp;ldquo;Thomas Jefferson&amp;rdquo; OR | 包含A或者B | A OR B 或者 A | B | | nodejs OR webpack +-&amp;ldquo;OR | 指令可以组合，完成更复杂的查询 | | | beach -sandy +albert +nathaniel ~ | 包含A, 并且包含B的近义词 | A ~B | | github ~js .</description>
    </item>
    
    <item>
      <title>金钱游戏 - 银行造钱的秘密</title>
      <link>https://wdd.js.org/posts/2018/the-secret-of-bank-create-money/</link>
      <pubDate>Wed, 25 Apr 2018 13:33:52 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/the-secret-of-bank-create-money/</guid>
      <description>1. 角色划分 名称 角色 账户 A 银行家 0 B 建筑商 100万 C 商人 0 2. 建筑商向银行存储100万 名称 角色 账户 A 银行家 100万 现金 B 建筑商 100万 支票 C 商人 0 2. 商人向银行贷款100万 此时银行的账户存款已经是0了，但是B还在银行存了100万。那银行究竟是还有100万呢, 还是一毛都没有了呢。
此时建筑商如果要取现金，那么银行马上就要破产。
名称 角色 账户 A 银行家 100现金 B 建筑商 100万 支票 C 商人 100万 支票 3. 商人需要建筑商来建造房子 商人需要建筑商来建筑房子，费用是100万，付给建筑商，建筑商又把100支票存到银行
名称 角色 账户 A 银行家 100万现金 B 建筑商 200万 支票 C 商人 0 商人又从银行借钱100万，来付给建筑商建房子，建筑商把钱存到银行
名称 角色 账户 A 银行家 100万现金 B 建筑商 300万 支票 C 商人 0 只要这个循环还在继续，你会发现，建筑商的账面上的支票越来越多，但是银行始终都是100万现金存在那里，从来都没动过。</description>
    </item>
    
    <item>
      <title>Express静态文件浏览器缓存设置与缓存清除</title>
      <link>https://wdd.js.org/posts/2018/express-static-file-cache-setting-and-cleaning/</link>
      <pubDate>Sun, 08 Apr 2018 09:00:48 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/express-static-file-cache-setting-and-cleaning/</guid>
      <description>1. Express设置缓存 Express设置静态文件的方法很简单，一行代码搞定。app.use(express.static(path.join(__dirname, &#39;public&#39;), {maxAge: MAX_AGE})), 注意MAX_AGE的单位是毫秒。这句代码的含义是让pulic目录下的所有文件都可以在浏览器中缓存，过期时长为MAX_AGE毫秒。
app.use(express.static(path.join(__dirname, &amp;#39;public&amp;#39;), {maxAge: config.get(&amp;#39;maxAge&amp;#39;)})) 2. Express让浏览器清除缓存 缓存的好处是可以更快的访问服务，但是缓存也有坏处。例如设置缓存为10天，第二天的时候服务更新了。如果客户端不强制刷新页面的话，浏览器会一致使用更新前的静态文件，这样会导致一些BUG。你总当每次出问题时，客户打电话给你后，你让他强制刷新浏览器吧？
所以，最好在服务重启后，重新让浏览器获取最新的静态文件。
设置的方式是给每一个静态文件设置一个时间戳。
例如：vendor/loadjs/load.js?_=123898923423&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
2.1. Express 路由 // /routes/index.js router.get(&amp;#39;/home&amp;#39;, function (req, res, next) { res.render(&amp;#39;home&amp;#39;, {config: config, serverStartTimestamp: new Date().getTime()}) }) 2.2. 视图文件 // views/home.html &amp;lt;script src=&amp;#34;vendor/loadjs/load.js?_=&amp;lt;%= serverStartTimestamp %&amp;gt;&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; 设置之后，每次服务更新或者重启，浏览器都会使用最新的时间戳serverStartTimestamp，去获取静态文件。
2.3. 动态加载JS文件 有时候js文件并不是直接在HTML中引入，可能是使用了一些js文件加载库，例如requirejs, LABjs等。这些情况下，可以在全局设置环境变量SERVER_START_TIMESTAMP，用来表示服务启动的时间戳，在获取js的时候，将该时间戳拼接在路径上。
注意：环境变量SERVER_START_TIMESTAMP，一定要在其他脚本使用前定义。
// views/home.html &amp;lt;script&amp;gt; var SERVER_START_TIMESTAMP = &amp;lt;%= serverStartTimestamp %&amp;gt; &amp;lt;/script&amp;gt; // load.js &amp;#39;vendor/contact-center/skill.js?_=&amp;#39; + SERVER_START_TIMESTAMP </description>
    </item>
    
    <item>
      <title>WebSocket断开原因分析</title>
      <link>https://wdd.js.org/posts/2018/websocket-close-reasons/</link>
      <pubDate>Thu, 29 Mar 2018 20:35:38 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/websocket-close-reasons/</guid>
      <description>1. 把错误打印出来 WebSocket断开的原因有很多，最好在WebSocket断开时，将错误打印出来。
在线demo地址：https://wdd.js.org/websocket-demos/
ws.onerror = function (e) { console.log(&amp;#39;WebSocket发生错误: &amp;#39; + e.code) console.log(e) } 如果你想自己玩玩WebSocket, 但是你又不想自己部署一个WebSocket服务器，你可以使用ws = new WebSocket(&#39;wss://echo.websocket.org/&#39;), 你向echo.websocket.org发送消息，它会回复你同样的消息。
2. 重要信息错误状态码 WebSocket断开时，会触发CloseEvent, CloseEvent会在连接关闭时发送给使用 WebSockets 的客户端. 它在 WebSocket 对象的 onclose 事件监听器中使用。CloseEvent的code字段表示了WebSocket断开的原因。可以从该字段中分析断开的原因。
3. 关闭状态码表 一般来说1006的错误码出现的情况比较常见，该错误码一般出现在断网时。
状态码 名称 描述 0–999 保留段, 未使用. 1000 CLOSE_NORMAL 正常关闭; 无论为何目的而创建, 该链接都已成功完成任务. 1001 CLOSE_GOING_AWAY 终端离开, 可能因为服务端错误, 也可能因为浏览器正从打开连接的页面跳转离开. 1002 CLOSE_PROTOCOL_ERROR 由于协议错误而中断连接. 1003 CLOSE_UNSUPPORTED 由于接收到不允许的数据类型而断开连接 (如仅接收文本数据的终端接收到了二进制数据). 1004 保留. 其意义可能会在未来定义. 1005 CLOSE_NO_STATUS 保留. 表示没有收到预期的状态码. 1006 CLOSE_ABNORMAL 保留. 用于期望收到状态码时连接非正常关闭 (也就是说, 没有发送关闭帧).</description>
    </item>
    
    <item>
      <title>js中的真值和假值</title>
      <link>https://wdd.js.org/posts/2018/js-true-and-false-value/</link>
      <pubDate>Tue, 27 Mar 2018 14:31:01 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/js-true-and-false-value/</guid>
      <description>无论什么语言，都需要逻辑，而逻辑中，能否判断出真假，是最基本也是最重要技能之一。
JS中的假值有6个 false &#39;&#39; undefinded null 0, +0, -0 NaN 有点类似假值的真值有两个 {} [] 空对象和空数组，很多初学者都很用把这两个当做假值。但是实际上他们是真值，你只需要记住，除了null之外的所有对象类型的数据，都是真值。
typeof null // &amp;#39;object&amp;#39; 据说：typeof null返回对象这是一个js语言中的bug。实际上typeof null应该返回null才比较准确，但是这个bug已经存来好久了。几乎所有的代码里都这样去判断。如果把typeof null给改成返回null, 那么这必定会导致JS世界末日。
我们承认JS并不完美，她有很多小缺点，但是这并不妨碍她吸引万千开发者拜倒在她的石榴裙下。
就像一首歌唱的：有些人说不清哪里好 但就是谁都替代不了</description>
    </item>
    
    <item>
      <title>在实践中我遇到stompjs, websocket和nginx的问题与总结</title>
      <link>https://wdd.js.org/posts/2018/stomp-over-websocket/</link>
      <pubDate>Tue, 20 Mar 2018 22:09:34 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/stomp-over-websocket/</guid>
      <description>1. AWS EC2 不支持WebSocket 直达解决方案 英文版
简单说一下思路：WebSocket底层基于TCP协议的，如果你的服务器基于HTTP协议暴露80端口，那WebSocket肯定无法连接。你只要将HTTP协议修改成TCP协议就可以了。
然后是安全组的配置：
同样如果使用了NGINX作为反向代理，那么NGINX也需要做配置的。
// https://gist.githubusercontent.com/unshift/324be6a8dc9e880d4d670de0dc97a8ce/raw/29507ed6b3c9394ecd7842f9d3228827cffd1c58/elasticbeanstalk_websockets files: &amp;#34;/etc/nginx/conf.d/01_websockets.conf&amp;#34; : mode: &amp;#34;000644&amp;#34; owner: root group: root content : | upstream nodejs { server 127.0.0.1:8081; keepalive 256; } server { listen 8080; location / { proxy_pass http://nodejs; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection &amp;#34;upgrade&amp;#34;; proxy_http_version 1.1; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } } &amp;#34;/opt/elasticbeanstalk/hooks/appdeploy/enact/41_remove_eb_nginx_confg.sh&amp;#34;: mode: &amp;#34;000755&amp;#34; owner: root group: root content : | mv /etc/nginx/conf.</description>
    </item>
    
    <item>
      <title>状态码为200时 jQuery ajax报错</title>
      <link>https://wdd.js.org/posts/2018/status-code-200-jquery-ajax-failed/</link>
      <pubDate>Thu, 15 Mar 2018 14:17:59 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/status-code-200-jquery-ajax-failed/</guid>
      <description>1. 问题现象 HTTP 状态码为 200 OK 时， jquery ajax报错
2. 问题原因 jquery ajax的dataType字段包含：json, 但是服务端返回的数据不是规范的json格式，导致jquery解析json字符串报错，最终导致ajax报错。
jQuery ajax 官方文档上说明：
&amp;ldquo;json&amp;rdquo;: Evaluates the response as JSON and returns a JavaScript object. Cross-domain &amp;ldquo;json&amp;rdquo; requests are converted to &amp;ldquo;jsonp&amp;rdquo; unless the request includes jsonp: false in its request options. The JSON data is parsed in a strict manner; any malformed JSON is rejected and a parse error is thrown. As of jQuery 1.9, an empty response is also rejected; the server should return a response of null or {} instead.</description>
    </item>
    
    <item>
      <title>前端剪贴板复制功能实现原理</title>
      <link>https://wdd.js.org/posts/2018/clipboard-copy-tutorial/</link>
      <pubDate>Wed, 14 Mar 2018 14:19:12 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/clipboard-copy-tutorial/</guid>
      <description>1. 兼容情况 如果想浏览器支持粘贴功能，那么浏览器必须支持，document.execCommand(&amp;lsquo;copy&amp;rsquo;)方法，也可以根据document.queryCommandEnabled(&amp;lsquo;copy&amp;rsquo;)，返回的true或者false判断浏览器是否支持copy命令。
从下表可以看出，主流的浏览器都支持execCommand命令
2. 复制的原理 查询元素 选中元素 执行复制命令 3. 代码展示 // html &amp;lt;input id=&amp;#34;username&amp;#34; value=&amp;#34;123456&amp;#34;&amp;gt; // 查询元素 var username = document.getElementById(‘username’) // 选中元素 username.select() // 执行复制 document.execCommand(&amp;#39;copy&amp;#39;) 注意: 以上代码只是简单示意，在实践过程中还有几个要判断的情况
首要要去检测浏览器execCommand能力检测 选取元素时，有可能选取元素为空，要考虑这种情况的处理 4. 第三方方案 clipboard.js是一个比较方便的剪贴板库，功能蛮多的。
&amp;lt;!-- Target --&amp;gt; &amp;lt;textarea id=&amp;#34;bar&amp;#34;&amp;gt;Mussum ipsum cacilds...&amp;lt;/textarea&amp;gt; &amp;lt;!-- Trigger --&amp;gt; &amp;lt;button class=&amp;#34;btn&amp;#34; data-clipboard-action=&amp;#34;cut&amp;#34; data-clipboard-target=&amp;#34;#bar&amp;#34;&amp;gt; Cut to clipboard &amp;lt;/button&amp;gt; 官方给的代码里有上面的一个示例，如果你用了这个示例，但是不起作用，那你估计是没有初始化ClipboardJS示例的。
注意：下面的函数必须要主动调用，这样才能给响应的DOM元素注册事件。 ClipboardJS源代码压缩后大约有3kb，虽然很小了，但是如果你不需要它的这么多功能的话，其实你自己写几行代码就可以搞定复制功能。
new ClipboardJS(&amp;#39;.btn&amp;#39;); </description>
    </item>
    
    <item>
      <title>Chrome本地跨域origin-null-is-not-allowed问题分析与解决方案</title>
      <link>https://wdd.js.org/posts/2018/origin-null-is-not-allowed/</link>
      <pubDate>Fri, 09 Mar 2018 17:58:05 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/origin-null-is-not-allowed/</guid>
      <description>1. 问题表现 以file:///xxx.html打开某个html文件，发送ajax请求时报错：
Response to preflight request doesn&amp;#39;t pass access control check: The &amp;#39;Access-Control-Allow-Origin&amp;#39; header has a value &amp;#39;null&amp;#39; that is not equal to the supplied origin. Origin &amp;#39;null&amp;#39; is therefore not allowed access. 2. 问题原因 Origin null是本地文件系统，因此这表明您正在加载通过file：// URL进行加载调用的HTML页面（例如，只需在本地文件浏览器或类似文件中双击它）。不同的浏览器采用不同的方法将相同来源策略应用到本地文件。Chrome要求比较严格，不允许这种形势的跨域请求。而最好使用http:// 访问html.
3. 解决方案 以下给出三个解决方案，第一个最快，第三个作为彻底。
3.1. 方案1 给Chrome快捷方式中增加 &amp;ndash;allow-file-access-from-files 打开Chrome快捷方式的属性中设置：右击Chrome浏览器快捷方式，选择“属性”，在“目标”中加&amp;quot;&amp;ndash;allow-file-access-from-files&amp;quot;，注意前面有个空格，重启Chrome浏览器便可。
3.2. 方案2 启动一个简单的静态文件服务器, 以http协议访问html 参见我的这篇文章: 一行命令搭建简易静态文件http服务器
3.3. 方案3 服务端响应修改Access-Control-Allow-Origin : * response.addHeader(&amp;#34;Access-Control-Allow-Origin&amp;#34;,&amp;#34;*&amp;#34;) 4. 参考文章 如何解决XMLHttpRequest cannot load file~~~~~~~Origin &amp;rsquo;null&amp;rsquo; is therefore not allowed access 让chrome支持本地Ajax请求,Ajax请求status cancel Origin null is not allowed by Access-Control-Allow-Origin Origin null is not allowed by Access-Control-Allow-Origin </description>
    </item>
    
    <item>
      <title>正则表达式在线工具集合</title>
      <link>https://wdd.js.org/posts/2018/regex-online-tools/</link>
      <pubDate>Sat, 24 Feb 2018 15:27:24 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/regex-online-tools/</guid>
      <description>1. 功能最强：regex101 优点：
支持多种语言, prec,php,javascript,python,golang 界面美观大方 支持错误提示，实时匹配 缺点：
有时候加载速度太慢 2. 可视化正则绘图: Regulex 优点：
实时根据正则表达式绘图 页面加载速度快 3. 可视化正则绘图：regexper 优点：
根据正则表达式绘图 页面加载速度快 缺点：
无法实时绘图，需要点击才可以 4. 专注于python正则：pyregex 专注python 页面加载速度快 </description>
    </item>
    
    <item>
      <title>前端面试和笔试题目</title>
      <link>https://wdd.js.org/posts/2018/front-end-interview-handbook/</link>
      <pubDate>Fri, 23 Feb 2018 15:18:26 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/front-end-interview-handbook/</guid>
      <description>1. 问答题 1.1. HTML相关 1.1.1. 的作用是什么？ 1.1.2. script, script async和script defer之间有什么区别？ 1.1.3. cookie, sessionStorage 和 localStorage之间有什么区别？ 1.1.4. 用过哪些html模板渲染工具？ 1.2. CSS相关 1.2.1. 简述CSS盒子模型 1.2.2. CSS有哪些选择器？ 1.2.3. CSS sprite是什么？ 1.2.4. 写一下你知道的前端UI框架？ 1.3. JS相关 1.3.1. js有哪些数据类型？ 1.3.2. js有哪些假值？ 1.3.3. js数字和字符串之间有什么快速转换的写法？ 1.3.4. 经常使用哪些ES6的语法？ 1.3.5. 什么是同源策略？ 1.3.6. 跨域有哪些解决方法？ 1.3.7. 网页进度条实现的原理 1.3.8. 请问console.log是同步的，还是异步的？ 1.3.9. 下面console输出的值是什么？ var scores = [10,11,12]; var total = 0; for(var score in scores){ total += score; } var average = total/scores.length; console.log(average); 1.</description>
    </item>
    
    <item>
      <title>small is better than big 我的读书方法论</title>
      <link>https://wdd.js.org/posts/2018/small-is-better-than-big/</link>
      <pubDate>Tue, 13 Feb 2018 14:57:23 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/small-is-better-than-big/</guid>
      <description>床底下秘密 我是一个毅力不是很够的人。我曾经下定决心要锻炼身体，买了一些健身器材，例如瑜伽垫，仰卧起坐的器材，俯卧撑的器材。然而三分钟的热度过后，我把瑜伽垫卷了起来，塞到床底下。把仰卧起坐的器材拆开，也塞到了床底下。
所以每次我都不敢看床底下，那里塞满了我的羞愧。我常常想，我这不就是永远睡在羞愧之上吗？
那么，是什么让我放弃了自己的目标，慢慢活成了自己讨厌的样子呢？
之前和朋友聊天，我们有一段时间没见了。我突然觉得他也太能聊了，说了很多我不知道的新鲜事，还有一些可以让人茅塞顿开的想法。完了之后，他劝我让我多读书。我觉得这个想法很多。我是确实需要读书了。毕竟我的床底下已经没有空间再塞其他的东西了。
于是我在多看阅读上买了一下电子书，在京东上买了一些实体书，然后又买了一个kindle。在读书的过程中，有时候作者也会推荐你看一些其他的书。我给自己定了2018年我的阅读计划，给自己定下要看哪些书。
看书的方法 当我决定要看书，并且为此付出了不少的金钱的情况下。我是非常不愿因让我的金钱的付出白白打水漂的，毕竟买书以及买设备，这不是免费的服务。于是我给自己指定了一个非常完善的定量阅读标准
读书方法v1.0.0 版 如下
每天至少看三本书 每本书看50页 人要有标准才能判断是否达标，没有标准，没有数字化的支撑，那是很难以持续的。比如说中国的菜谱，做某道菜中写了一句：加入少许盐。中国人看了会想，那我就按照口味随便加点盐吧。外国人就会被搞得非常迷糊，少许是多少克盐？ 20g, 30g? 完全没有标准嘛。
按照读书方法 v1.0.0版，我看了几天，这个效果是很好的。但是我很累，电子书50页可不是个小数目。有时候很难完成的。于是我必须要升级我的读书方法。
读书方法v1.0.1 版 如下
每天至少看三本书 每本书看10页 按照读书方法v1.0.1 版，我看了几天，虽然读书的进度很慢，但是我很容易有满足感，因为这个目标是很容易就达成的。因为你随便去上个厕所，看个10页电子书也是绰绰有余的。但是这个版本也有个问题。
如果我今天看的这本书看的流连忘返，一不小心忘记看页码了，居然不知不觉读了38页，那么是不是已经消耗了未来几天的阅读量呢，明天这本书要不要度呢？ 所以，我要升级我的读书方法。
读书方法v1.0.2版：
每天至少读三本书 每本书至少读10页 我按照这个方法，感觉做的不错。每天都有一定的阅读量要看，而且阅读量不是很大，不会让我觉得很累。而且当我完成了这个目标，我是会获得不小的满足感。
大目标分解成小目标去逐个击破，这是我这篇文章的核心观点。
冲量公式 I = F x T 冲量是力的时间累积效应的量度，是矢量。如果物体所受的力是大小和方向都不变的恒力F，冲量I就是F和作用时间t的乘积。 冲量是描述力对物体作用的时间累积效应的物理量。力的冲量是一个过程量。在谈及冲量时，必须明确是哪个力在哪段时间上的冲量。
个人好习惯的养成，不是一蹴而就的，而是类似于物理学冲量的概念：力在一段时间内的累积，是过程量
三分钟的热度对应的冲量：I = F_max x T_min。使用很大的力，作用时间超短，基本上没啥效果，冲量趋近于零。
微习惯对应的冲量：I = F_min x T_max。使用很小的力，做长时间的积累。冲量不会趋近于零，而是会慢慢增长，然后趋近于一个稳定水平。比如你给自己规定每天看1页书，但是大多数情况下，如果你做了看书的动作，基本上你看书的页数一定会大于1页。
看什么样的书 我自己喜欢看计算机，心理学，历史人文方面的出版书籍。而我的选择标准有两个，符合任一一个，我都会去看。
要有用。无论是对我的专业知识，还是对人际交往，金融理财等方面要用有益之处 要有趣。没趣的书我是断然不会去看的。 读书实际上是读人，一流作家写的一流的书，三流作家只能写出九流的书。</description>
    </item>
    
    <item>
      <title>基于 WebRTC 构建 Web SIP Phone</title>
      <link>https://wdd.js.org/posts/2018/webrtc-web-sip-phone/</link>
      <pubDate>Sun, 11 Feb 2018 14:44:58 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/webrtc-web-sip-phone/</guid>
      <description>0 阅前须知 本文并不是教程，只是实现方案 我只是从WEB端考虑这个问题，实际还需要后端sip服务器的配合 jsSIP有个非常不错的在线demo, 可以去哪里玩耍，很好玩呢 try jssip 1. 技术简介 WebRTC: WebRTC，名称源自网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的API。它于2011年6月1日开源并在Google、Mozilla、Opera支持下被纳入万维网联盟的W3C推荐标准 SIP: 会话发起协议（Session Initiation Protocol，缩写SIP）是一个由IETF MMUSIC工作组开发的协议，作为标准被提议用于创建，修改和终止包括视频，语音，即时通信，在线游戏和虚拟现实等多种多媒体元素在内的交互式用户会话。2000年11月，SIP被正式批准成为3GPP信号协议之一，并成为IMS体系结构的一个永久单元。SIP与H.323一样，是用于VoIP最主要的信令协议之一。 一般来说，要么使用实体话机，要么在系统上安装基于sip的客户端程序。实体话机硬件成本高，基于sip的客户端往往兼容性差，无法跨平台，易被杀毒软件查杀。
而WebRTC或许是更好的解决方案，只要一个浏览器就可以实时语音视频通话，这是很不错的解决方案。WebSocket可以用来传递sip信令，而WebRTC用来实时传输语音视频流。
2. 前端WebRTC实现方案 其实我们不需要去自己处理WebRTC的相关方法，或者去处理视频或者媒体流。市面上已经有不错的模块可供选择。
2.1 jsSIP jsSIP是JavaScript SIP 库
功能特点如下：
可以在浏览器或者Nodejs中运行 使用WebSocket传递SIP协议 视频音频实时消息使用WebRTC 非常轻量 100%纯JavaScript 使用简单并且具有强大的Api 服务端支持 OverSIP, Kamailio, Asterisk, OfficeSIP，reSIProcate，Frafos ABC SBC，TekSIP 是RFC 7118 and OverSIP的作者写的 下面是使用JsSIP打电话的例子，非常简单吧
// Create our JsSIP instance and run it: var socket = new JsSIP.WebSocketInterface(&amp;#39;wss://sip.myhost.com&amp;#39;); var configuration = { sockets : [ socket ], uri : &amp;#39;sip:alice@example.</description>
    </item>
    
    <item>
      <title>不常用却很有妙用的事件及方法</title>
      <link>https://wdd.js.org/posts/2018/useful-browser-events/</link>
      <pubDate>Sun, 11 Feb 2018 14:34:17 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/useful-browser-events/</guid>
      <description>1 visibilitychange事件 触发条件：浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.
使用场景：当标签页显示或者隐藏时，触发一些业务逻辑
document.addEventListener(&amp;#34;visibilitychange&amp;#34;, function() { console.log( document.visibilityState ); }); 2 storage事件 触发条件：使用localStorage or sessionStorage存储或者修改某个本地存储时
使用场景：标签页间通信
// AB页面同源 // 在A 页面 window.addEventListener(&amp;#39;storage&amp;#39;, (e) =&amp;gt; {console.log(e)}) // 在B 页面，向120打个电话 localStorage.setItem(&amp;#39;makeCall&amp;#39;,&amp;#39;120&amp;#39;) // 然后可以在A页面间有输出, 可以看出A页面 收到了B页面的通知 ...key: &amp;#34;makeCall&amp;#34;, oldValue: &amp;#34;119&amp;#34;, newValue: &amp;#34;120&amp;#34;, ... 3 beforeunload事件 触发条件：当页面的资源将要卸载(及刷新或者关闭标签页前). 当页面依然可见，并且该事件可以被取消只时
使用场景：关闭或者刷新页面时弹窗确认，关闭页面时向后端发送报告等
window.addEventListener(&amp;#34;beforeunload&amp;#34;, function (e) { var confirmationMessage = &amp;#34;\o/&amp;#34;; e.returnValue = confirmationMessage; // Gecko, Trident, Chrome 34+ return confirmationMessage; // Gecko, WebKit, Chrome &amp;lt;34 }); 4 navigator.</description>
    </item>
    
    <item>
      <title>mac vscode 更新失败 Permission denied解决办法</title>
      <link>https://wdd.js.org/posts/2018/mac-vscode-update-permission-denied/</link>
      <pubDate>Sun, 11 Feb 2018 14:20:01 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/mac-vscode-update-permission-denied/</guid>
      <description>0. 现象 Could not create temporary directory: Permission denied
1. 问题起因 在 /Users/username/Library/Caches/目录下，有以下两个文件， 可以看到，他们两个的用户是不一样的，一个是root一个username, 一般来说，我是以username来使用我的mac的。就是因为这两个文件的用户不一样，导致了更新失败。
drwxr-xr-x 6 username staff 204B Jan 17 20:33 com.microsoft.VSCode drwxr--r-- 2 root staff 68B Dec 17 13:51 com.microsoft.VSCode.ShipIt 2. 解决方法 注意： 先把vscode 完全关闭
// 1. 这一步是需要输入密码的 sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/ // 2. 这一步是不需要输入密码的, 如果不进行第一步，第二步会报错 sudo chown $USER ~/Library/Caches/com.microsoft.VSCode.ShipIt/* // 3. 更新xattr xattr -dr com.apple.quarantine /Applications/Visual\ Studio\ Code.app 3. 打开vscode Code &amp;gt; Check for Updates, 点击之后，你会发现Check for Updates已经变成灰色了，那么你需要稍等片刻，马上就可以更新，之后会跳出提示，让你重启vscode, 然后重启一下vscode, 就ok了。</description>
    </item>
    
    <item>
      <title>IE11 0x2ee4 bug 以及类似问题解决方法</title>
      <link>https://wdd.js.org/posts/2018/ie11-0x2ee4-bug/</link>
      <pubDate>Sun, 11 Feb 2018 14:12:19 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/ie11-0x2ee4-bug/</guid>
      <description>一千个IE浏览器访问同一个页面，可能报一千种错误。前端激进派对IE恨得牙痒痒，但是无论你爱，或者不爱，IE就在那里，不来不去。
一些银行，以及政府部门，往往都是指定必须使用IE浏览器。所以，一些仅在IE浏览器上出现的问题。总结起来问题的原因很简单：IE的配置不正确
下面就将一个我曾经遇到的问题: IE11 0x2ee4， 以及其他的问题的解决方案
1. IE11 SCRIPT7002: XMLHttpRequest: 网络错误 0x2ee4 背景介绍：在一个HTTPS域向另外一个HTTPS域发送跨域POTST请求时
这个问题在浏览器的输出内容如下，怪异的是，并不是所有IE11都会报这个错误。
SCRIPT7002: XMLHttpRequest: 网络错误 0x2ee4, 由于出现错误 00002ee4 而导致此项操作无法完成 stackoverflow上有个答案，它的思路是：在post请求发送之前，先进行一次get操作 这个方式我试过，是可行的。但是深层次的原因我不是很明白。
然而真相总有大白的一天，其实深层次的原因是，IE11的配置。
去掉检查证书吊销的的检查，解决0x2ee4的问题
解决方法
去掉check for server certificate revocation*， 也有可能你那边是中文翻译的：叫检查服务器证书是否已吊销 去掉检查发型商证书是否已吊销 点击确定 重启计算机 2 其他常规设置 2.1 去掉兼容模式， 使用Edge文档模式 下图中红色框里的按钮也要取消勾选 2.2 有些使用activeX，还是需要检查是否启用的 2.3 允许跨域 如果你的接口跨域了，还要检查浏览器是否允许跨域，否则浏览器可能默认就禁止跨域的
设置方法
internet选项 安全 自定义级别 启用通过跨域访问数据源 启用跨域浏览窗口和框架 确定 然后重启电脑 </description>
    </item>
    
    <item>
      <title>Vue&#43;ElementUI 手把手教你做一个audio组件</title>
      <link>https://wdd.js.org/posts/2018/vue-elementui-audio-component/</link>
      <pubDate>Fri, 09 Feb 2018 13:44:13 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/vue-elementui-audio-component/</guid>
      <description>1. 简介 1.1. 相关技术 Vue Vue-cli ElementUI yarn (之前我用npm, 并使用cnpm的源，但是用了yarn之后，我发现它比cnpm的速度还快，功能更好，我就毫不犹豫选择yarn了) Audio相关API和事件 1.2. 从本教程你会学到什么？ Vue单文件组件开发知识 Element UI基本用法 Audio原生API及Audio相关事件 音频播放器的基本原理 音频的播放暂停控制 更新音频显示时间 音频进度条控制与跳转 音频音量控制 音频播放速度控制 音频静音控制 音频下载控制 个性化配置与排他性播放 一点点ES6语法 2. 学前准备 基本上不需要什么准备，但是如果你能先看一下Aduio相关API和事件将会更好
Audio: 如果你愿意一层一层剥开我的心 使用 HTML5 音频和视频 3. 在线demon 没有在线demo的教程都是耍流氓
查看在线demon 项目地址 4. 开始编码 5. 项目初始化 ➜ test vue init webpack element-audio A newer version of vue-cli is available. latest: 2.9.2 installed: 2.9.1 ? Project name element-audio ? Project description A Vue.js project ?</description>
    </item>
    
    <item>
      <title>你不知道的JSON.stringify()妙用</title>
      <link>https://wdd.js.org/posts/2018/json-stringify-powerful/</link>
      <pubDate>Fri, 09 Feb 2018 13:27:15 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/json-stringify-powerful/</guid>
      <description>1. 语法 JSON.stringify(value[, replacer[, space]]) 一般用法：
var user = {name: &amp;#39;andy&amp;#39;, isDead: false, age: 11, addr: &amp;#39;shanghai&amp;#39;}; JSON.stringify(user); &amp;#34;{&amp;#34;name&amp;#34;:&amp;#34;andy&amp;#34;,&amp;#34;isDead&amp;#34;:false,&amp;#34;age&amp;#34;:11,&amp;#34;addr&amp;#34;:&amp;#34;shanghai&amp;#34;}&amp;#34; 2. 扩展用法 2.1. replacer replacer可以是函数或者是数组。
功能1: 改变属性值 将isDead属性的值翻译成0或1，0对应false,1对应true
var user = {name: &amp;#39;andy&amp;#39;, isDead: false, age: 11, addr: &amp;#39;shanghai&amp;#39;}; JSON.stringify(user, function(key, value){ if(key === &amp;#39;isDead&amp;#39;){ return value === true ? 1 : 0; } return value; }); &amp;#34;{&amp;#34;name&amp;#34;:&amp;#34;andy&amp;#34;,&amp;#34;isDead&amp;#34;:0,&amp;#34;age&amp;#34;:11,&amp;#34;addr&amp;#34;:&amp;#34;shanghai&amp;#34;}&amp;#34; 功能2：删除某个属性 将isDead属性删除，如果replacer的返回值是undefined,那么该属性会被删除。
var user = {name: &amp;#39;andy&amp;#39;, isDead: false, age: 11, addr: &amp;#39;shanghai&amp;#39;}; JSON.</description>
    </item>
    
    <item>
      <title>ECharts 轮流高亮中国地图各个省份</title>
      <link>https://wdd.js.org/posts/2018/echarts-highlight-china-map/</link>
      <pubDate>Fri, 09 Feb 2018 13:16:53 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/echarts-highlight-china-map/</guid>
      <description>1. 小栗子 最早我是想通过dispatchAction方法去改变选中的省份，但是没有起作用，如果你知道这个方法怎么实现，麻烦你可以告诉我。 我实现的方法是另外一种。
dispatchAction({ type: &amp;#39;geoSelect&amp;#39;, // 可选，系列 index，可以是一个数组指定多个系列 seriesIndex?: number|Array, // 可选，系列名称，可以是一个数组指定多个系列 seriesName?: string|Array, // 数据的 index，如果不指定也可以通过 name 属性根据名称指定数据 dataIndex?: number, // 可选，数据名称，在有 dataIndex 的时候忽略 name?: string }) 后来我改变了一个方法。这个方法的核心思路是定时获取图标的配置，然后更新配置，最后在设置配置。
var myChart = echarts.init(document.getElementById(&amp;#39;china-map&amp;#39;)); var COLORS = [&amp;#34;#070093&amp;#34;, &amp;#34;#1c3fbf&amp;#34;, &amp;#34;#1482e5&amp;#34;, &amp;#34;#70b4eb&amp;#34;, &amp;#34;#b4e0f3&amp;#34;, &amp;#34;#ffffff&amp;#34;]; // 指定图表的配置项和数据 var option = { tooltip: { trigger: &amp;#39;item&amp;#39;, formatter: &amp;#39;{b}&amp;#39; }, series: [ { name: &amp;#39;中国&amp;#39;, type: &amp;#39;map&amp;#39;, mapType: &amp;#39;china&amp;#39;, selectedMode : &amp;#39;single&amp;#39;, label: { normal: { show: true }, emphasis: { show: true } }, data:[ // 默认高亮安徽省 {name:&amp;#39;安徽&amp;#39;, selected:true} ], itemStyle: { normal: { areaColor: &amp;#39;rgba(255,255,255,0.</description>
    </item>
    
    <item>
      <title>一行命令搭建简易静态文件http服务器</title>
      <link>https://wdd.js.org/posts/2018/one-command-create-static-file-server/</link>
      <pubDate>Fri, 09 Feb 2018 13:01:14 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/one-command-create-static-file-server/</guid>
      <description>简易服务器：在命令执行的所在路径启动一个http服务器，然后你可以通过浏览器访问该路径下的所有文件。
在局域网内传文件，或者自己测试使用都是非常方便的。
1. 基于python 1.1. 基于Python2 python -m SimpleHTTPServer port
&amp;gt; python -m SimpleHTTPServer 8099 Serving HTTP on 0.0.0.0 port 8099 ... 127.0.0.1 - - [24/Oct/2017 11:07:56] &amp;#34;GET / HTTP/1.1&amp;#34; 200 - 1.2. 基于python3 python3 -m http.server port
&amp;gt; python3 -m http.server 8099 Serving HTTP on 0.0.0.0 port 8099 (http://0.0.0.0:8099/) ... 127.0.0.1 - - [24/Oct/2017 11:05:06] &amp;#34;GET / HTTP/1.1&amp;#34; 200 - 127.0.0.1 - - [24/Oct/2017 11:05:06] code 404, message File not found 127.</description>
    </item>
    
    <item>
      <title>120行代码实现 浏览器WebRTC视频聊天</title>
      <link>https://wdd.js.org/posts/2018/webrtc-tutorial-simple-video-chat/</link>
      <pubDate>Fri, 09 Feb 2018 12:56:12 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/webrtc-tutorial-simple-video-chat/</guid>
      <description>本例子是参考webrtc-tutorial-simple-video-chat做的。 这个教程应该主要是去宣传ScaleDrone的sdk, 他们的服务是收费的，但是免费的也可以用，就是有些次数限制。
本栗子的地址 本栗子的pages地址
因为使用的是ScaleDrone的js sdk, 后期很可能服务不稳定之类的
1. 准备 使用最新版谷歌浏览器（62版） 视频聊天中 一个是windows, 一个是mac stun服务器使用谷歌的，trun使用ScaleDrone的sdk，这样我就不用管服务端了。 2. 先上效果图 3. 再上在线例子点击此处 4. 源码分析 // 产生随机数 if (!location.hash) { location.hash = Math.floor(Math.random() * 0xFFFFFF).toString(16); } // 获取房间号 var roomHash = location.hash.substring(1); // 放置你自己的频道id, 这是我注册了ScaleDrone 官网后，创建的channel // 你也可以自己创建 var drone = new ScaleDrone(&amp;#39;87fYv4ncOoa0Cjne&amp;#39;); // 房间名必须以 &amp;#39;observable-&amp;#39;开头 var roomName = &amp;#39;observable-&amp;#39; + roomHash; var configuration = { iceServers: [{ urls: &amp;#39;stun:stun.l.google.com:19302&amp;#39; // 使用谷歌的stun服务 }] }; var room; var pc; function onSuccess() {} function onError(error) { console.</description>
    </item>
    
    <item>
      <title>如何写好技术文档?</title>
      <link>https://wdd.js.org/posts/2018/how-to-write-a-technical-document/</link>
      <pubDate>Fri, 09 Feb 2018 12:52:57 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/how-to-write-a-technical-document/</guid>
      <description>本文来自于公司内部的一个分享。 在文档方面，对内的一些接口文档主要是用swagger来写的。虽然可以在线测试，比较方便。但是也存在着一些更新不及时，swgger文档无法导出成文件的问题。 在对外提供的文档方面：我主要负责做一个浏览器端的一个js sdk。文档还算可以github地址，所以想把一些写文档的心得分享给大家。
1. 衡量好文档的唯一标准是什么？ Martin(Bob大叔)曾在《代码整洁之道》一书打趣地说：当你的代码在做 Code Review 时，审查者要是愤怒地吼道：
“What the fuck is this shit?” “Dude, What the fuck！” 等言辞激烈的词语时，那说明你写的代码是 Bad Code，如果审查者只是漫不经心的吐出几个
“What the fuck?”，
那说明你写的是 Good Code。衡量代码质量的唯一标准就是每分钟骂出“WTF” 的频率。
衡量文档的标准也是如此。
2. 好文档的特点 简洁：一句话可以说完的事情，就不要分两句话来说。并不是文档越厚越好，太厚的文档大多没人看。 准确: 字段类型，默认值，备注，是否必填等属性说明。 逻辑性: 文档如何划分？ 利于查看。 demo胜千言: 好的demo胜过各种字段说明，可以复制下来直接使用。 读者心: 从读者的角度考虑, 方法尽量简洁。可以传递一个参数搞定的事情，绝对不要让用户去传两个参数。 及时更新: 不更新的文档比bug更严重。 向后兼容: 不要随意废弃已有的接口或者某个字段，除非你考虑到这样做的后果。 建立文档词汇表：每个概念只有一个名字，不要随意起名字，名不正则言不顺。 格式统一：例如时间格式。我曾见过2017-09-12 09:32:23, 或2017.09.12 09:32:23或2017.09.12 09:32:23。变量名user_name, userName。 使用专业词语：不要过于口语化 3. 总结: 写出好文档要有以下四点 逻辑性：便于查找 专业性: 值得信赖，质量保证 责任心：及时更新，准确性，向后兼容 读者心：你了解的东西，别人可能并不清楚。从读者的角度去考虑，他们需要什么，而不是一味去强调你能提供什么。 4. 写文档的工具 markdown: 方便快捷，可以导出各种格式的文件 swagger: 功能强大，需要部署，不方便传递文件 5.</description>
    </item>
    
    <item>
      <title>哑代理 - TCP链接高Recv-Q，内存泄露的罪魁祸首</title>
      <link>https://wdd.js.org/posts/2018/tcp-high-recv-q-or-send-q-reasons/</link>
      <pubDate>Thu, 08 Feb 2018 21:58:31 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/tcp-high-recv-q-or-send-q-reasons/</guid>
      <description>1. 问题现象 使用netstat -ntp命令时发现，Recv-Q 1692012 异常偏高（正常情况下，该值应该是0），导致应用占用过多的内存。
tcp 1692012 0 172.17.72.4:48444 10.254.149.149:58080 ESTABLISHED 27/node 问题原因：代理的转发时，没有删除逐跳首部
2. 什么是Hop-by-hop 逐跳首部？ http首部可以分为两种
端到端首部 End-to-end: 端到端首部代理在转发时必须携带的 逐跳首部 Hop-by-hop: 逐跳首部只对单次转发有效，代理在转发时，必须删除这些首部 逐跳首部有以下几个, 这些首部在代理进行转发前必须删除
Connetion Keep-Alive Proxy-Authenticate Proxy-Authortization Trailer TE Transfer-Encodeing Upgrade 3. 什么是哑代理？ 很多老的或简单的代理都是盲中继(blind relay),它们只是将字节从一个连接转发到另一个连接中去,不对Connection首部进行特殊的处理。
(1)在图4-15a中 Web客户端向代理发送了一条报文,其中包含了Connection:Keep-Alive首部,如果可能的话请求建立一条keep-alive连接。客户端等待响应,以确定对方是否认可它对keep-alive信道的请求。
(2) 哑代理收到了这条HTTP请求,但它并不理解 Connection首部(只是将其作为一个扩展首部对待)。代理不知道keep-alive是什么意思,因此只是沿着转发链路将报文一字不漏地发送给服务器(图4-15b)。但Connection首部是个逐跳首部,只适用于单条传输链路,不应该沿着传输链路向下传输。接下来,就要发生一些很糟糕的事情了。
(3) 在图4-15b中,经过中继的HTTP请求抵达了Web服务器。当Web服务器收到经过代理转发的Connection: Keep-Alive首部时,会误以为代理(对服务器来说,这个代理看起来就和所有其他客户端一样)希望进行keep-alive对话!对Web服务器来说这没什么问题——它同意进行keep-alive对话,并在图4-15c中回送了一个Connection: Keep-Alive响应首部。所以,此时W eb服务器认为它在与代理进行keep-alive对话,会遵循keep-alive的规则。但代理却对keep-alive一无所知。不妙。
(4) 在图4-15d中,哑代理将Web服务器的响应报文回送给客户端,并将来自Web服务器的Connection: Keep-Alive首部一起传送过去。客户端看到这个首部,就会认为代理同意进行keep-alive对话。所以,此时客户端和服务器都认为它们在进行keep-alive对话,但与它们进行对话的代理却对keep-alive一无所知。
(5) 由于代理对keep-alive一无所知,所以会将收到的所有数据都回送给客户端,然后等待源端服务器关闭连接。但源端服务器会认为代理已经显式地请求它将连接保持在打开状态了,所以不会去关闭连接。这样,代理就会挂在那里等待连接的关闭。
(6) 客户端在图4-15d中收到了回送的响应报文时,会立即转向下一条请求,在keep-alive连接上向代理发送另一条请求(参见图4-15e)。而代理并不认为同一条连接上会有其他请求到来,请求被忽略,浏览器就在这里转圈,不会有任何进展了。
(7) 这种错误的通信方式会使浏览器一直处于挂起状态,直到客户端或服务器将连接超时,并将其关闭为止。 &amp;ndash;《HTTP权威指南》
这是HTTP权威指南中，关于HTTP哑代理的描述。这里这里说了哑代理会造成的一个问题。
这种错误的通信方式会使浏览器一直处于挂起状态,直到客户端或服务器将连接超时,并将其关闭为止。 实际上，我认为哑代理还是造成以下问题的原因
TCP链接高Recv-Q tcp链接不断开，导致服务器内存过高，内存泄露 节点iowait高 在我们自己的代理的代码中，我有发现，在代理进行转发时，只删除了headers.host, 并没有删除headers.Connection等逐跳首部的字段
delete req.headers.host var option = { url: url, headers: req.</description>
    </item>
    
    <item>
      <title>定时器学习：利用定时器分解耗时任务案例</title>
      <link>https://wdd.js.org/posts/2018/settimeout-to-splice-big-work/</link>
      <pubDate>Thu, 08 Feb 2018 14:09:54 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/settimeout-to-splice-big-work/</guid>
      <description>对于执行时间过长的脚本，有的浏览器会弹出警告，说页面无响应。有的浏览器会直接终止脚本。总而言之，浏览器不希望某一个代码块长时间处于运行状态，因为js是单线程的。一个代码块长时间运行，将会导致其他任何任务都必须等待。从用户体验上来说，很有可能发生页面渲染卡顿或者点击事件无响应的状态。
如果一段脚本的运行时间超过5秒，有些浏览器（比如Firefox和Opera）将弹出一个对话框警告用户该脚本“无法响应”。而其他浏览器，比如iPhone上的浏览器，将默认终止运行时间超过5秒钟的脚本。&amp;ndash;《JavaScript忍者秘籍》
JavaScript忍者秘籍里有个很好的比喻：页面上发生的各种事情就好像一群人在讨论事情，如果有个人一直在说个不停，其他人肯定不乐意。我们希望有个裁判，定时的切换其他人来说话。
Js利用定时器来分解任务，关键点有两个。
按什么维度去分解任务
任务的现场保存与现场恢复
1. 例子 要求：动态创建一个表格，一共10000行，每行10个单元格
1.1. 一次性创建 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tbody&amp;gt;&amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var tbody = document.getElementsByTagName(&amp;#39;tbody&amp;#39;)[0]; var allLines = 10000; // 每次渲染的行数 console.time(&amp;#39;wd&amp;#39;); for(var i=0; i&amp;lt;allLines; i++){ var tr = document.createElement(&amp;#39;tr&amp;#39;); for(var j=0; j&amp;lt;10; j++){ var td = document.createElement(&amp;#39;td&amp;#39;); td.appendChild(document.createTextNode(i+&amp;#39;,&amp;#39;+j)); tr.appendChild(td); } tbody.appendChild(tr); } console.timeEnd(&amp;#39;wd&amp;#39;); &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 总共耗时180ms, 浏览器已经给出警告！[Violation] &#39;setTimeout&#39; handler took 53ms。
1.2. 分批次动态创建 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;utf-8&amp;#34;&amp;gt; &amp;lt;title&amp;gt;&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;table&amp;gt; &amp;lt;tbody&amp;gt;&amp;lt;/tbody&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; var tbody = document.</description>
    </item>
    
    <item>
      <title>关于JavaScropt函数式编程，我多么希望能早点看到这本书</title>
      <link>https://wdd.js.org/posts/2018/js-functional-programming/</link>
      <pubDate>Thu, 08 Feb 2018 14:06:22 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/js-functional-programming/</guid>
      <description>我父亲以前跟我说过，有些事物在你得到之前是无足轻重的，得到之后就不可或缺了。微波炉是这样，智能手机是这样，互联网也是这样——老人们在没有互联网的时候过得也很充实。对我来说，函数的柯里化（curry）也是这样。
然后我继续看了这本书的中文版。有些醍醐灌顶的感觉。 随之在github搜了一下。 我想，即使付费，我也愿意看。
中文版地址：https://www.gitbook.com/book/llh911001/mostly-adequate-guide-chinese/details github原文地址：https://github.com/MostlyAdequate/mostly-adequate-guide
1. 后记 其实我是想学点函数柯里化的东西，然后用谷歌搜索了一下。第一个结果就是这本书。非常感谢谷歌搜索，如果我用百度，可能就没有缘分遇到这本书了。</description>
    </item>
    
    <item>
      <title>终于找到你！如何将前端console.log的日志保存成文件?</title>
      <link>https://wdd.js.org/posts/2018/save-console-log-as-file/</link>
      <pubDate>Thu, 08 Feb 2018 13:56:40 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/save-console-log-as-file/</guid>
      <description>本篇文章来自一个需求，前端websocket会收到各种消息，但是调试的时候，我希望把websoekt推送过来的消息都保存到一个文件里，如果出问题的时候，我可以把这些消息的日志文件提交给后端开发区分析错误。但是在浏览器里，js一般是不能写文件的。鼠标另存为的方法也是不太好，因为会保存所有的console.log的输出。于是，终于找到这个debugout.js。
debugout.js的原理是将所有日志序列化后，保存到一个变量里。当然这个变量不会无限大，因为默认的最大日志限制是2500行，这个是可配置的。另外，debugout.js也支持在localStorage里存储日志的。
1. debugout.js 一般来说，可以使用打开console面板，然后右键save，是可以将console.log输出的信息另存为log文件的。但是这就把所有的日志都包含进来了，如何只保存我想要的日志呢？
（调试输出）从您的日志中生成可以搜索，时间戳，下载等的文本文件。 参见下面的一些例子。
Debugout的log（）接受任何类型的对象，包括函数。 Debugout不是一个猴子补丁，而是一个单独的记录类，你使用而不是控制台。
调试的一些亮点：
在运行时或任何时间获取整个日志或尾部 搜索并切片日志 更好地了解可选时间戳的使用模式 在一个地方切换实时日志记录（console.log） 可选地将输出存储在window.localStorage中，并在每个会话中持续添加到同一个日志 可选地，将日志上限为X个最新行以限制内存消耗 下图是使用downloadLog方法下载的日志文件。
官方提供的demo示例，欢迎试玩。http://inorganik.github.io/debugout.js/
2. 使用 在脚本顶部的全局命名空间中创建一个新的调试对象，并使用debugout的日志方法替换所有控制台日志方法：
var bugout = new debugout(); // instead of console.log(&amp;#39;some object or string&amp;#39;) bugout.log(&amp;#39;some object or string&amp;#39;); 3. API log() -像console.log(), 但是会自动存储 getLog() - 返回所有日志 tail(numLines) - 返回尾部执行行日志，默认100行 search(string) - 搜索日志 getSlice(start, numLines) - 日志切割 downloadLog() - 下载日志 clear() - 清空日志 determineType() - 一个更细粒度的typeof为您提供方便 4. 可选配置 ··· // log in real time (forwards to console.</description>
    </item>
    
    <item>
      <title>如何浏览器里调试iframe里层的代码？</title>
      <link>https://wdd.js.org/posts/2018/debug-code-in-iframe/</link>
      <pubDate>Thu, 08 Feb 2018 13:53:48 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/debug-code-in-iframe/</guid>
      <description>之前一直非常痛苦，在iframe外层根本获取不了里面的信息，后来使用了postMessage用传递消息来实现，但是用起来还是非常不方便。
其实浏览器本身是可以选择不同的iframe的执行环境的。例如有个变量是在iframe里面定义的，你只需要切换到这个iframe的执行环境，你就可以随意操作这个环境的任何变量了。
这个小技巧，对于调试非常有用，但是我直到今天才发现。
1. Chrome 这个小箭头可以让你选择不同的iframe的执行环境，可以切换到你的iframe环境里。
2. IE 如图所示是ie11的dev tool点击下来箭头，也可以选择不同的iframe执行环境。
3. 其他浏览器 其他浏览器可以自行摸索一下。。。（G_H）</description>
    </item>
    
    <item>
      <title>Audio 如果你愿意一层一层剥开我的心</title>
      <link>https://wdd.js.org/posts/2018/audio-heart-detail/</link>
      <pubDate>Thu, 08 Feb 2018 09:44:01 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/audio-heart-detail/</guid>
      <description>我觉得DOM就好像是元素周期表里的元素，JS就好像是实验器材，通过各种化学反应，产生各种魔术。
1. Audio 通过打开谷歌浏览器的dev tools -&amp;gt; Settings -&amp;gt; Elements -&amp;gt; Show user agent shadow DOM, 你可以看到其实Audio标签也是由常用的 input标签和div等标签合成的。
2. 基本用法 1 &amp;lt;audio src=&amp;#34;http://65.ierge.cn/12/186/372266.mp3&amp;#34;&amp;gt; Your browser does not support the audio element. &amp;lt;/audio&amp;gt; &amp;lt;br&amp;gt; 2 &amp;lt;audio src=&amp;#34;http://65.ierge.cn/12/186/372266.mp3&amp;#34; controls=&amp;#34;controls&amp;#34;&amp;gt; Your browser does not support the audio element. &amp;lt;/audio&amp;gt; &amp;lt;br&amp;gt; // controlsList属性目前只支持 chrome 58+ 3 &amp;lt;audio src=&amp;#34;http://65.ierge.cn/12/186/372266.mp3&amp;#34; controls=&amp;#34;controls&amp;#34; controlsList=&amp;#34;nodownload&amp;#34;&amp;gt; Your browser does not support the audio element. &amp;lt;/audio&amp;gt; &amp;lt;br&amp;gt; 4 &amp;lt;audio controls=&amp;#34;controls&amp;#34;&amp;gt; &amp;lt;source src=&amp;#34;http://65.</description>
    </item>
    
    <item>
      <title>可能被遗漏的https与http的知识点</title>
      <link>https://wdd.js.org/posts/2018/you-dont-know-https-and-http/</link>
      <pubDate>Thu, 08 Feb 2018 09:10:59 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/you-dont-know-https-and-http/</guid>
      <description>1. HTTPS域向HTTP域发送请求会被浏览器直接拒绝，HTTP向HTTPS则不会 例如在github pages页面，这是一个https页面，如果在这个页面向http发送请求，那么会直接被浏览器拒绝，并在控制台输出下面的报错信息。
jquery-1.11.3.min.js:5 Mixed Content: The page at &amp;#39;https://wangduanduan.github.io/ddddddd/&amp;#39; was loaded over HTTPS, but requested an insecure XMLHttpRequest endpoint &amp;#39;http://cccccc/log/conf?token=welljoint&amp;#39;. This request has been blocked; the content must be served over HTTPS. 如果你在做第三方集成的系统，如果他们是在浏览器中直接调用你提供的接口，那么最好你使用https协议，这样无论对方是https还是http都可以访问。（相信我，这个很重要，我曾经经历过上线后遇到这个问题，然后连夜申请证书，把http升级到https的痛苦经历）
2. HTTPS的默认端口是443，而不是443 如果443端口已经被其他服务占用了，那么使用其他任何没有被占用的端口都可以用作HTTPS服务，只不过在请求的时候需要加上端口号罢了。
3. 如何快速隐藏一个DOM元素 选中一个元素，然后按h,这时候就会在选中的DOM元素上加上__web-inspector-hide-shortcut__类，这个类会让元素隐藏。谷歌和火狐上都可以，IE上没有试过行不行。</description>
    </item>
    
    <item>
      <title>直接在Chrome DevTools调试Node.js</title>
      <link>https://wdd.js.org/posts/2018/debug-nodejs-in-chrome-devtool/</link>
      <pubDate>Wed, 07 Feb 2018 14:15:43 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/debug-nodejs-in-chrome-devtool/</guid>
      <description>英文好的，直接看原文
https://blog.hospodarets.com/nodejs-debugging-in-chrome-devtools
1. 要求 Node.js 6.3+ Chrome 55+ 2. 操作步骤 1 打开连接 chrome://flags/#enable-devtools-experiments 2 开启开发者工具实验性功能 3 重启浏览器 4 打开 DevTools Setting -&amp;gt; Experiments tab 5 按6次shift后，隐藏的功能会出现，勾选&amp;quot;Node debugging&amp;quot; 3. 运行程序 必须要有 --inspect
&amp;gt; node --inspect www Debugger listening on port 9229. Warning: This is an experimental feature and could change at any time. To start debugging, open the following URL in Chrome: chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;amp;v8only=true&amp;amp;ws=localhost:9229/78a884f4-8c2e-459e-93f7-e1cbe87cf5cf 将这个地址粘贴到谷歌浏览器：chrome-devtools://devtools/remote/serve_file/@60cd6e859b9f557d2312f5bf532f6aec5f284980/inspector.html?experiments=true&amp;amp;v8only=true&amp;amp;ws=localhost:9229/78a884f4-8c2e-459e-93f7-e1cbe87cf5cf
程序后端输出的日志也回输出到谷歌浏览器的console里面，同时也可以在Sources里进行断点调试了。 </description>
    </item>
    
    <item>
      <title>【译】13简单的优秀编码规则（从我15年的经验）</title>
      <link>https://wdd.js.org/posts/2018/few-simple-rules-for-good-coding-my-15-years-experience/</link>
      <pubDate>Wed, 07 Feb 2018 14:03:12 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/few-simple-rules-for-good-coding-my-15-years-experience/</guid>
      <description>原文地址：https://hackernoon.com/few-simple-rules-for-good-coding-my-15-years-experience-96cb29d4acd9#.ddzpjb80c
嗨，我的工作作为一个程序员超过15年，并使用许多不同的语言，范例，框架和其他狗屎。我想和大家分享我写好代码的规则。
1. 优化VS可读性 去他妈的优化 始终编​​写易于阅读且对开发人员可理解的代码。因为在硬可读代码上花费的时间和资源将远远高于从优化中获得的。 如果你需要进行优化，那么使它像DI的独立模块，具有100％的测试覆盖率，并且不会被触及至少一年。
2. 架构第一 我看到很多人说“我们需要快速做事，我们没有时间做架构”。其中约99％的人因为这样的想法而遇到了大问题。 编写代码而不考虑其架构是没有用的，就像没有实现它们的计划一样，梦想你的愿望。 在编写代码的第一行之前，你应该明白它将要做什么，它将如何使用，模块，服务如何相互工作，它将有什么结构，如何进行测试和调试，以及如何更新。
3. 测试覆盖率 测试是好事，但他们并不总是负担得起，对项目有意义。
当你需要测试：
当你编写模块时，微服务将不会被触及至少一个月。 当你编写开源代码。 当你编写涉及金融渠道的核心代码或代码。 当您有代码更新的同时更新测试的资源。 当你不需要测试时：
当你是一个创业。 当你有小团队和代码更改是快速。 当你编写的脚本，可以简单地通过他们的输出手动测试。 记住，带有严格测试的代码可能比没有测试的代码更有害。
4. 保持简单，极度简单 不要编写复杂的代码。更多更简单，那么更少的错误它可能有和更少的时间来调试它们。代码应该做的只是它需要没有非常多的抽象和其他OOP shit（尤其是涉及java开发人员）+ 20％的东西可能需要在将来以简单的方式更新它。
5. 注释 出现注释说明你的代码不够好。好的代码应该是可以理解的，没有一行注释。但是如何为新开发人员节省时间？ - 编写简单的内联文档描述什么和如何方法工作。这将节省很多时间来理解，甚至更多 - 它将给人们更多的机会来提出更好的实施这种方法。并且它将是全球代码文档的良好开端。
6. 硬耦合VS较小耦合 始终尝试使用微服务架构。单片软件可以比微服务软件运行得更快，但只能在一个服务器的上下文中运行。 微服务使您可以不仅在许多服务器上，而且有时甚至在一台机器上（我的意思是过程分发）高效地分发您的软件。
7. 代码审查 代码审查可以是好的，也以是坏的。 您可以组织代码审查，只有当您有开发人员了解95％的代码，谁可以监控所有更新，而不浪费很多时间。在其他情况下，这将是只是耗时，每个人都会讨厌这个。
在这部分有很多问题，所以更深入地描述这一点。
许多人认为代码审查是一个很好的方式教新手，或者工作在不同部分的代码的队友。但是代码审查的主要目标是保持代码质量，而不是教学。让我们想象你的团队制作代码用于控制核反应堆或太空火箭发动机的冷却系统。你在非常硬的逻辑中犯了巨大的错误，然后你给这个代码审查新的家伙。你怎么认为会发生意外的风险？ - 我的练习率超过70％。
良好的团队是每个人都有自己的角色，负责确切的工作。如果有人想要理解另一段代码，那么他去一个负责任去问他。你不可能知道一切，更好的优秀的理解小块代码而不是理解所有。
8. 重构没啥用 在我的职业生涯中，我听到很多次“不要担心，我们以后会重构它”。在未来，这会导致大的技术债务或从头开始删除所有的代码和写作。
所以，不要得到一个债务，除非你有钱从头开发你的软件几次。
9. 当你累了或在一个坏的心情不要写代码。 当开发人员厌倦时，他们正在制造2到5倍或者更多的bug。所以工作更多是非常糟糕的做法。这就是为什么越来越多的国家思考6小时工作日，其中一些已经有了。精神工作不同于使用你的二头肌。
10. 不要一次写全部 - 使开发迭代 在编写代码分析和预测之前，您的客户/客户真正需要什么，然后选择您可以在短期内以高质量开发的MVF（最有价值的功能）。使用这样的迭代来部署质量更新，而不是腰部时间和资源对不合理的愿望和牺牲与质量。
11. 自动化VS手动 自动化是长期的100％成功。所以如果你有资源自动化的东西，现在应该做。你可能认为“只需要5分钟，为什么我应该自动化？但让我计算这个。例如，它是5个开发人员的日常任务。 5分钟* 5天* 21天* 12个月= 6 300分钟= 105小时= 13.</description>
    </item>
    
    <item>
      <title>JavaScript 高级技巧</title>
      <link>https://wdd.js.org/posts/2018/js-high-skills/</link>
      <pubDate>Wed, 07 Feb 2018 10:14:56 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/js-high-skills/</guid>
      <description>0.1. 安全类型检测 javascript内置类型检测并不可靠 safari某些版本（&amp;lt;4）typeof正则表达式返回为function 建议使用Object.prototype.toString.call()方法检测数据类型
function isArray(value){ return Object.prototype.toString.call(value) === &amp;#34;[object Array]&amp;#34;; } function isFunction(value){ return Object.prototype.toString.call(value) === &amp;#34;[object Function]&amp;#34;; } function isRegExp(value){ return Object.prototype.toString.call(value) === &amp;#34;[object RegExp]&amp;#34;; } function isNativeJSON(){ return window.JSON &amp;amp;&amp;amp; Object.prototype.toString.call(JSON) === &amp;#34;[object JSON]&amp;#34;; } 对于ie中一COM对象形式实现的任何函数，isFunction都返回false，因为他们并非原生的javascript函数。
在web开发中，能够区分原生与非原生的对象非常重要。只有这样才能确切知道某个对象是否有哪些功能
以上所有的正确性的前提是：Object.prototype.toString没有被修改过
0.2. 作用域安全的构造函数 function Person(name){ this.name = name; } //使用new来创建一个对象 var one = new Person(&amp;#39;wdd&amp;#39;); //直接调用构造函数 Person(); 由于this是运行时分配的，如果你使用new来操作，this指向的就是one。如果直接调用构造函数，那么this会指向全局对象window,然后你的代码就会覆盖window的原生name。如果有其他地方使用过window.name, 那么你的函数将会埋下一个深藏的bug。
==那么，如何才能创建一个作用域安全的构造函数？== 方法1
function Person(name){ if(this instanceof Person){ this.name = name; } else{ return new Person(name); } } 1.</description>
    </item>
    
    <item>
      <title>突然觉得自己好像没学过JS</title>
      <link>https://wdd.js.org/posts/2018/i-realy-dont-know-js/</link>
      <pubDate>Wed, 07 Feb 2018 10:09:42 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/i-realy-dont-know-js/</guid>
      <description>0.1. 先看题：mean的值是什么？ var scores = [10,11,12]; var total = 0; for(var score in scores){ total += score; } var mean = total/scores.length; console.log(mean); 0.2. 是11？ 恭喜你：答错了！
0.3. 是1？ 恭喜你：答错了！
0.4. 正确答案： 4 解释： for in 循环循环的值永远是key, key是一个字符串。所以total的值是：&amp;lsquo;0012&amp;rsquo;。它是一个字符串，字符串&#39;0012&amp;rsquo;/3,0012会被转换成12，然后除以3，结果是4。
0.5. 后记 这个示例是来自《编写高质量JavaScript的68个方法》的第49条：数组迭代要优先使用for循环而不是for in循环。 既然已经发布，就可能有好事者拿出去当面试题。这个题目很有可能坑一堆人。其中包括我。
这里涉及到许多js的基础知识.
for in 循环是循环对象的索引属性，key是一个字符串。 数值类型和字符串相加，会自动转换为字符串 字符串除以数值类型，会先把字符串转为数值，最终结果为数值 正确方法
var scores = [10,11,12]; var total = 0; for(var i=0, n=scores.length; i &amp;lt; n; i++){ total += scores[i]; } var mean = total/scores.</description>
    </item>
    
    <item>
      <title>发起Ajax请求当页面onunload</title>
      <link>https://wdd.js.org/posts/2018/send-ajax-when-page-unload/</link>
      <pubDate>Wed, 07 Feb 2018 09:18:54 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/send-ajax-when-page-unload/</guid>
      <description>0.1. 同步Ajax 这种需求主要用于当浏览器关闭，或者刷新时，向后端发起Ajax请求。
window.onunload = function(){ $.ajax({url:&amp;#34;http://localhost:8888/test.php?&amp;#34;, async:false}); }; 使用async：false参数使请求同步（默认是异步的）。
同步请求锁定浏览器，直到完成。 如果请求是异步的，页面只是继续卸载。 它足够快，以至于该请求甚至没有时间触发。服务端很可能收不到请求。
0.2. navigator.sendBeacon 优点：简洁、异步、非阻塞 缺点：这是实验性的技术，并非所有浏览器都支持。其中IE和safari不支持该技术。
示例：
window.addEventListener(&amp;#39;unload&amp;#39;, logData, false); function logData() { navigator.sendBeacon(&amp;#34;/log&amp;#34;, analyticsData); } 参考：http://stackoverflow.com/questions/1821625/ajax-request-with-jquery-on-page-unload 参考：https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon</description>
    </item>
    
    <item>
      <title>git合并上游仓库即同步fork后的仓库</title>
      <link>https://wdd.js.org/posts/2018/fork-sync-learn/</link>
      <pubDate>Wed, 31 Jan 2018 17:16:44 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/fork-sync-learn/</guid>
      <description>1. 前提说明 仓库A: http://gitlab.tt.cc:30000/fe/omp.git 仓库B: 仓库Bfork自仓库A, 仓库A的地址是：http://gitlab.tt.cc:30000/wangdd/omp.git 某一时刻，仓库A更新了。仓库B需要同步上游分支的更新。
2. 本地操作 // 1 查看远程分支 ➜ omp git:(master) git remote -v origin	http://gitlab.tt.cc:30000/wangdd/omp.git (fetch) origin	http://gitlab.tt.cc:30000/wangdd/omp.git (push) // 2 添加一个远程同步的上游仓库 ➜ omp git:(master) git remote add upstream http://gitlab.tt.cc:30000/fe/omp.git ➜ omp git:(master) git remote -v origin	http://gitlab.tt.cc:30000/wangdd/omp.git (fetch) origin	http://gitlab.tt.cc:30000/wangdd/omp.git (push) upstream	http://gitlab.tt.cc:30000/fe/omp.git (fetch) upstream	http://gitlab.tt.cc:30000/fe/omp.git (push) // 3 拉去上游分支到本地，并且会被存储在一个新分支upstream/master ➜ omp git:(master) git fetch upstream remote: Counting objects: 4, done. remote: Compressing objects: 100% (4/4), done.</description>
    </item>
    
    <item>
      <title>如何写好接口文档？</title>
      <link>https://wdd.js.org/posts/2018/how-to-write-better-api-docs/</link>
      <pubDate>Mon, 29 Jan 2018 22:01:55 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/how-to-write-better-api-docs/</guid>
      <description>1. HTTP携带信息的方式 url headers body: 包括请求体，响应体 2. 分离通用信息 一般来说，headers里的信息都是通用的，可以提前说明，作为默认参数
3. 路径中的参数表达式 URL中参数表达式使用{}的形式，参数包裹在大括号之中{paramName}
例如：
/api/user/{userId} /api/user/{userType}?age={age}&amp;amp;gender={gender} 4. 数据模型定义 数据模型定义包括：
路径与查询字符串参数模型 请求体参数模型 响应体参数模型 数据模型的最小数据集：
名称 是否必须 说明 “最小数据集”（MDS）是指通过收集最少的数据，较好地掌握一个研究对象所具有的特点或一件事情、一份工作所处的状态，其核心是针对被观察的对象建立起一套精简实用的数据指标。最小数据集的概念起源于美国的医疗领域。最小数据集的产生源于信息交换的需要，就好比上下级质量技术监督部门之间、企业与质量技术监督部门之间、质量技术监督部门与社会公众之间都存在着信息交换的需求。
一些文档里可能会加入字段的类型，但是我认为这是没必要的。以为HTTP传输的数据往往都需要序列化，大部分数据类型都是字符串。一些特殊的类型，例如枚举类型的字符串，可以在说明里描述。
另外：数据模型非常建议使用表格来表现。
举个栗子🌰：
名称 是否必须 说明 userType 是 用户类型。commom表示普通用户，vip表示vip用户 age 否 用户年龄 gender 否 用户性别。1表示男，0表示女 5. 请求示例 // general POST http://www.testapi.com/api/user // request payload { &amp;#34;name&amp;#34;: &amp;#34;qianxun&amp;#34;, &amp;#34;age&amp;#34;: 14, &amp;#34;like&amp;#34;: [&amp;#34;music&amp;#34;, &amp;#34;reading&amp;#34;], &amp;#34;userType&amp;#34;: &amp;#34;vip&amp;#34; } // response { &amp;#34;id&amp;#34;: &amp;#34;asdkfjalsdkf&amp;#34; } 6. 异常处理 异常处理最小数据集</description>
    </item>
    
    <item>
      <title>win7 ie11 开发者工具打开后一片空白</title>
      <link>https://wdd.js.org/posts/2018/ie11-without-devtool/</link>
      <pubDate>Mon, 29 Jan 2018 21:43:12 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/ie11-without-devtool/</guid>
      <description>解决方法安装Windows7补丁：KB3008923； 下载地址： http://www.microsoft.com/en-us/download/details.aspx?id=45134 （32位） http://www.microsoft.com/zh-CN/download/details.aspx?id=45154 （64位）</description>
    </item>
    
    <item>
      <title>CSTA 呼叫模型简介</title>
      <link>https://wdd.js.org/posts/2018/csta-call-model-overview/</link>
      <pubDate>Mon, 29 Jan 2018 21:35:24 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/csta-call-model-overview/</guid>
      <description>1. 内容概要 CSTA协议与标准概述 CSTA OpenScape 语音架构概述 2. CSTA协议标准 2.1. 什么是CSTA ? CSTA：电脑支持通讯程序(Computer Supported TelecommunicationsApplications)
基本的呼叫模型在1992建立，后来随着行业发展，呼叫模型也被加强和扩展，例如新的协议等等
CSTA是一个应用层接口，用来监控呼叫，设备和网络
CSTA创建了一个通讯程序的抽象层:
CSTA并不依赖任何底层的信令协议 E.g.H.323,SIP,Analog,T1,ISDN,etc. CSTA并不要求用户必须使用某些设备 E.g.intelligentendpoints,low-function/stimulusdevices,SIPSignalingmodels-3PCC vs. Peer/Peer 适用不同的操作模式
第三方呼叫控制 一方呼叫控制 CSTA的设计目标是为了提高各种CSTA实现之间的移植性
规范化呼叫模型和行为 完成服务、事件定义 规范化标准 3. CSTA 标准的进化史 阶段1 (发布于 June ’92)
40 特性, 66 页 (服务定义) 专注于呼叫控制 阶段2 (发布于 Dec. ’94)
77 特性, 145 页 (服务定义) I/O &amp;amp; 语音单元服务, 更多呼叫控制服务 阶段3 - CSTA Phase II Features &amp;amp; versit CTI Technology
发布于 Dec. ‘98 136 特性, 650 页 (服务定义) 作为ISO 标准发布于 July 2000 发布 CSTA XML (ECMA-323) June 2004 发布 “Using CSTA with Voice Browsers” (TR/85) Dec.</description>
    </item>
    
    <item>
      <title>组织在召唤：如何免费获取一个js.org的二级域名</title>
      <link>https://wdd.js.org/posts/2018/how-to-get-jsorg-sub-domain/</link>
      <pubDate>Mon, 29 Jan 2018 18:08:03 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/how-to-get-jsorg-sub-domain/</guid>
      <description>之前我是使用wangduanduan.github.io作为我的博客地址，后来觉得麻烦，有把博客关了。最近有想去折腾折腾。 先看效果：wdd.js.org
如果你不了解js.org可以看看我的这篇文章:一个值得所有前端开发者关注的网站js.org
1. 前提 已经有了github pages的一个博客，并且博客中有内容，没有内容会审核不通过的。我第一次申请域名，就是因为内容太少而审核不通过。 2. 想好自己要什么域名？ 比如你想要一个：wdd.js.org的域名，你先在浏览器里访问这个地址，看看有没有人用过，如果已经有人用过，那么你就只能想点其他的域名了。
3. fork js.org的项目，添加自己的域名 1 fork https://github.com/js-org/dns.js.org 2 修改你fork后的仓库中的cnames_active.js文件，加上自己的一条域名，最好要按照字母顺序
如下图所示，我在第1100行加入。注意，不要在该行后加任何注释。
&amp;#34;wdd&amp;#34;: &amp;#34;wangduanduan.github.io&amp;#34;, 3 commit
4. 加入CNAME文件 我是用hexo和next主题作为博客的模板。其中我在gh-pages分支写博客，然后部署到master分支。
我在我的gh-pages分支的source目录下加入CNAME文件, 内容只有一行
wdd.js.org 将博客再次部署好，如果CNAME生效的话，你已经无法从原来的地址访问：wangduanduan.github.io， 这个博客了。
5. 向js.org项目发起pull-request 找到你fork后的项目，点击 new pull request, 向原来的项目发起请求。
然后你可以在js-org/dns.js.org项目的pull requests看到你的请求，当这个请求被合并时，你就拥有了js.org的二级域名。</description>
    </item>
    
    <item>
      <title>不常用却很有妙用的事件及方法</title>
      <link>https://wdd.js.org/posts/2018/browser-events/</link>
      <pubDate>Mon, 29 Jan 2018 14:15:25 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/browser-events/</guid>
      <description>1. visibilitychange事件 触发条件：浏览器标签页被隐藏或显示的时候会触发visibilitychange事件.
使用场景：当标签页显示或者隐藏时，触发一些业务逻辑
document.addEventListener(&amp;#34;visibilitychange&amp;#34;, function() { console.log( document.visibilityState ); }); 2. storage事件 触发条件：使用localStorage or sessionStorage存储或者修改某个本地存储时
使用场景：标签页间通信
// AB页面同源 // 在A 页面 window.addEventListener(&amp;#39;storage&amp;#39;, (e) =&amp;gt; {console.log(e)}) // 在B 页面，向120打个电话 localStorage.setItem(&amp;#39;makeCall&amp;#39;,&amp;#39;120&amp;#39;) // 然后可以在A页面间有输出, 可以看出A页面 收到了B页面的通知 ...key: &amp;#34;makeCall&amp;#34;, oldValue: &amp;#34;119&amp;#34;, newValue: &amp;#34;120&amp;#34;, ... 3. beforeunload事件 触发条件：当页面的资源将要卸载(及刷新或者关闭标签页前). 当页面依然可见，并且该事件可以被取消只时
使用场景：关闭或者刷新页面时弹窗确认，关闭页面时向后端发送报告等
window.addEventListener(&amp;#34;beforeunload&amp;#34;, function (e) { var confirmationMessage = &amp;#34;\o/&amp;#34;; e.returnValue = confirmationMessage; // Gecko, Trident, Chrome 34+ return confirmationMessage; // Gecko, WebKit, Chrome &amp;lt;34 }); 4.</description>
    </item>
    
    <item>
      <title>油猴子脚本 - 我的地盘我做主</title>
      <link>https://wdd.js.org/posts/2018/tampermonkey/</link>
      <pubDate>Mon, 29 Jan 2018 13:58:37 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/tampermonkey/</guid>
      <description>当你用浏览器访问某个网页时，你可曾想过，你看到的这个网页，实际上是属于你自己的。
打个比喻：访问某个网站就好像是网购了一筐鸡蛋，鸡蛋虽然是养鸡场生产的，但是这个蛋我怎么吃，你养鸡场管不着。
当然了，对于很多人来说，鸡蛋没有别的吃法，鸡蛋只能煮着吃。
你可以看如下的页面：当你在某搜索引擎上搜索前端开发时
大多数人看到的页面是这样的, 满屏的广告，满屏的推广，满屏的排名，满屏的中间地址跳转，满屏的流量劫持, 还有莆田系
但是有些人的页面却是这样的：清晰，自然，链接直达，清水出芙蓉，天然去雕饰 这就是油猴子脚本干的事情， 当然，它能干的事情，远不止如此。它是齐天大圣孙悟空，有七十二变。
1. 什么是油猴子脚本？ Greasemonkey，简称GM，中文俗称为“油猴”，是Firefox的一个附加组件。它让用户安装一些脚本使大部分HTML为主的网页于用户端直接改变得更方便易用。随着Greasemonkey脚本常驻于浏览器，每次随着目的网页打开而自动做修改，使得运行脚本的用户印象深刻地享受其固定便利性。
Greasemonkey可替网页加入些新功能（例如在亚马逊书店嵌入商品比价功能）、修正网页错误、组合来自不同网页的数据、或者数繁不及备载的其他功能。写的好的Greasemonkey脚本甚至可让其输出与被修改的页面集成得天衣无缝，像是原本网页里的一部分。 来自维基百科
2. 如何安装油猴子插件？ 在google商店搜索Tampermonkey, 安装量最高的就是它。
3. 如何写油猴子脚本？ 油猴子脚本有个新建脚本页面，在此页面可以创建脚本。具体教程可以参考。
中文 GreaseMonkey 用户脚本开发手册 GreaseMonkey（油猴子）脚本开发 深入浅出 Greasemonkey Greasemonkey Hacks/Getting Started 4. 如何使用他人的脚本？ greasyfork网站提供很多脚本，它仿佛是代码界的github, 可以在该网站搜到很多有意思的脚本。
5. 有哪些好用的脚本？ 有哪些超神的油猴脚本?
或者你可以在greasyfork网站查看一些下载量排行</description>
    </item>
    
    <item>
      <title>追本溯源：substr与substring历史漫话</title>
      <link>https://wdd.js.org/posts/2018/substr-and-substring-history/</link>
      <pubDate>Mon, 29 Jan 2018 13:46:31 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/substr-and-substring-history/</guid>
      <description>引子： 很多时候，当我要字符串截取时，我会想到substr和substring的方法，但是具体要怎么传参数时，我总是记不住。哪个应该传个字符串长度，哪个又应该传个开始和结尾的下标，如果我不去查查这两个函数，我始终不敢去使用它们。所以我总是觉得，这个两个方法名起的真是蹩脚。然而事实是这样的吗？
看来是时候扒一扒这两个方法的历史了。
1. 基因追本溯源 在编程语言的历史长河中，曾经出现过很多编程语言。然而大浪淘沙，铅华洗尽之后，很多早已折戟沉沙，有些却依旧光彩夺目。那么stubstr与substring的DNA究竟来自何处？
1950与1960年代
1954 - FORTRAN 1958 - LISP 1959 - COBOL 1964 - BASIC 1970 - Pascal 1967-1978：确立了基础范式
1972 - C语言 1975 - Scheme 1978 - SQL (起先只是一种查询语言，扩充之后也具备了程序结构) 1980年代：增强、模块、性能
1983 - C++ (就像有类别的C) 1988 - Tcl 1990年代：互联网时代
1991 - Python 1991 - Visual Basic 1993 - Ruby 1995 - Java 1995 - Delphi (Object Pascal) 1995 - JavaScript 1995 - PHP 2009 - Go 2014 - Swift (编程语言) 1.</description>
    </item>
    
    <item>
      <title>熟练使用使用jQuery Promise (Deferred)</title>
      <link>https://wdd.js.org/posts/2018/jquery-deferred/</link>
      <pubDate>Mon, 29 Jan 2018 13:43:23 +0000</pubDate>
      
      <guid>https://wdd.js.org/posts/2018/jquery-deferred/</guid>
      <description>1. 情景再现 以前用nodejs写后端程序时，遇到Promise这个概念，这个东西好呀！不用谢一层一层回调，直接用类似于jQuery的连缀方式。后来遇到bluebird这个库，它就是Promise库中很有名的。我希望可以把Promise用在前端的ajax请求上，但是我不想又引入bluebird。后来发现，jquery本身就具有类似于Promise的东西。于是我就jquery的Promise写一些异步请求。
2. 不堪回首 看看一看我以前写异步请求的方式
// 函数定义 function sendRequest(req,successCallback,errorCallback){ $.ajax({ ... ... success:function(res){ successCallback(res); }, error:function(res){ errorCallback(res); } }); } // 函数调用,这个函数的匿名函数写的时候很容易出错，而且有时候难以理解 sendRequest(req,function(res){ //请求成功 ... },function(res){ //请求失败 ... }); 3. 面朝大海 下面是我希望的异步调用方式
sendRequest(req) .done(function(res){ //请求成功 ... }) .fail(function(req){ //请求失败 ... }); 4. 废话少说，放‘码’过来 talk is cheap, show me the code
// 最底层的发送异步请求，做成Promise的形式 App.addMethod(&amp;#39;_sendRequest&amp;#39;,function(path,method,payload){ var dfd = $.Deferred(); $.ajax({ url:path, type:method || &amp;#34;get&amp;#34;, headers:{ sessionId:session.id || &amp;#39;&amp;#39; }, data:JSON.stringify(payload), dataType:&amp;#34;json&amp;#34;, contentType : &amp;#39;application/json; charset=UTF-8&amp;#39;, success:function(data){ dfd.</description>
    </item>
    
  </channel>
</rss>
